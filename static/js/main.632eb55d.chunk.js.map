{"version":3,"sources":["trivia.png","pages/Login.jsx","actions/index.js","actions/actionTypes.js","helpers/htmldecode.js","components/subComponents/WrongAnswer.jsx","components/subComponents/CorrectAnswer.jsx","components/subComponents/AlternativesContainer.jsx","components/NextAndFeedback.jsx","components/Questions.jsx","components/ScoreBoard.jsx","pages/Game.jsx","pages/Settings.jsx","pages/Feedback.jsx","pages/Ranking.jsx","App.js","serviceWorker.js","reducers/loginReducer.js","reducers/triviaReducer.js","reducers/sectionReducer.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","Login","props","state","name","email","verifyRegexEmail","bind","this","test","length","target","value","setState","triviaAPI","history","login","token","localStorage","setItem","push","className","src","logo","alt","width","htmlFor","type","placeholder","id","data-testid","onChange","e","handleChange","disabled","onClick","startGame","role","aria-label","Component","connect","triviaReducer","sectionTriviaToken","dispatch","fetch","then","response","json","catch","error","errorData","data","initialLogin","decodeHtml","html","txt","document","createElement","innerHTML","WrongAnswer","text","alternativeIndex","answerClick","styleAlternative","countDown","key","style","border","CorrectAnswer","AlternativesContainer","renderAlternatives","alternatives","map","array","sort","a","b","questions","NextAndFeedback","index","nextQuestion","Questions","questionIndex","assertions","score","handleState","updateTimer","difficult","throwToLocalStorage","player","gravatarEmail","JSON","stringify","requestQuestions","getItem","i","interval","setInterval","clearInterval","results","username","section","difficultLevel","difficulty","correct_answer","questionScore","category","question","correctAnswer","incorrectAnswers","incorrect_answers","loginReducer","allQuestions","questionsRequest","sectionUser","ScoreBoard","sectionPlayer","sectionReducer","Game","md5Email","md5","toString","md5Converter","Settings","Feedback","sendPlayerInfoToRanking","ranking","gravatarHash","avatarURL","newRanking","parse","concat","picture","emptyRanking","scoreMessage","Ranking","rankingSortPodium","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.632eb55d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","// create react component\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport logo from '../trivia.png';\nimport { requestToken, initialLogin } from '../actions';\nimport '../styles/Login.css';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n    };\n    this.verifyRegexEmail = this.verifyRegexEmail.bind(this);\n  }\n\n  verifyRegexEmail() {\n    /** Para realizar o uso de verificação do email, tive que usar o regex pattern\n     * para verificação de email abaixo:\n     * Source: https://forum.blip.ai/t/resolvido-regex-para-validacao-de-email/1635 */\n    const { email, name } = this.state;\n    const emailRegex = /^([\\w.-]+)@([\\w-]+)((\\.(\\w){2,3})+)$/;\n    return (emailRegex.test(email) && name.length > 0);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  async startGame() {\n    const { triviaAPI, history, login } = this.props;\n    await triviaAPI();\n    const { token } = this.props;\n    localStorage.setItem('token', token);\n    history.push('/game');\n    login(this.state);\n  }\n\n  render() {\n    const { history } = this.props;\n    return (\n      <div className=\"login-container\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" width=\"150\" />\n        <h1>Login</h1>\n        <div className=\"login\">\n          <label htmlFor=\"inputEmail\">\n            <input\n              type=\"text\"\n              placeholder=\"Email\"\n              id=\"inputEmail\"\n              data-testid=\"input-gravatar-email\"\n              name=\"email\"\n              onChange={ (e) => this.handleChange(e) }\n            />\n          </label>\n          <label htmlFor=\"inputName\">\n            <input\n              type=\"text\"\n              placeholder=\"Nome\"\n              id=\"inputName\"\n              data-testid=\"input-player-name\"\n              name=\"name\"\n              onChange={ (e) => this.handleChange(e) }\n            />\n          </label>\n        </div>\n        <div className=\"login-buttons\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-play\"\n            disabled={ !this.verifyRegexEmail() }\n            onClick={ () => this.startGame() }\n          >\n            Jogar\n          </button>\n          {/* https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/master/docs/rules/accessible-emoji.md */}\n          <button\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            onClick={ () => history.push('/settings') }\n          >\n            <span role=\"img\" aria-label=\"engine-emoji\">⚙️</span>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.triviaReducer.sectionTriviaToken,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  triviaAPI: () => dispatch(requestToken()),\n  login: (data) => dispatch(initialLogin(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  triviaAPI: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  login: PropTypes.func.isRequired,\n};\n","import * as types from './actionTypes';\n\nexport const tokenRequestSuccess = ({ token }) => ({\n  type: types.TOKEN_REQUEST_SUCCESS,\n  token,\n});\n\nexport const tokenRequestError = (errorData) => ({\n  type: types.TOKEN_REQUEST_ERROR,\n  errorData,\n});\n\nexport const initialLogin = (data) => ({\n  type: types.LOGIN,\n  data,\n});\n\nexport const allQuestions = (questions) => ({\n  type: types.QUESTIONS_REQUEST,\n  questions,\n});\n\nexport const sectionUser = (section) => ({\n  type: types.SECTION_USER,\n  section,\n});\n\nexport function requestToken() {\n  return (dispatch) => fetch('https://opentdb.com/api_token.php?command=request')\n    .then((response) => response.json())\n    .then((token) => dispatch(tokenRequestSuccess(token)))\n    .catch((error) => dispatch(tokenRequestError(error)));\n}\n\nexport function questionsRequest(token) {\n  return (dispatch) => fetch(`https://opentdb.com/api.php?amount=5&token=${token}`)\n    .then((response) => response.json())\n    .then((questions) => dispatch(allQuestions(questions)));\n}\n","export const LOGIN = 'LOGIN';\nexport const TOKEN_REQUEST_ERROR = 'TOKEN_REQUEST_ERROR';\nexport const TOKEN_REQUEST_SUCCESS = 'TOKEN_REQUEST_SUCCESS';\nexport const QUESTIONS_REQUEST = 'QUESTIONS_REQUEST';\nexport const SECTION_USER = 'SECTION_USER';\n","export default function decodeHtml(html) {\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport decodeHtml from '../../helpers/htmldecode';\nimport '../../styles/Questions/WrongAnswer.css';\n\nclass WrongAnswer extends Component {\n  render() {\n    const { text,\n      alternativeIndex,\n      answerClick,\n      styleAlternative,\n      countDown } = this.props;\n    const styles = {\n      border: '3px solid rgb(255, 0, 0)',\n    };\n    return (\n      <button\n        type=\"button\"\n        key={ text }\n        data-testid={ `wrong-answer-${alternativeIndex}` }\n        onClick={ (e) => answerClick(e) }\n        style={ styleAlternative ? styles : null }\n        disabled={ countDown === 0 }\n      >\n        {decodeHtml(text)}\n      </button>\n    );\n  }\n}\n\nexport default WrongAnswer;\n\nWrongAnswer.propTypes = {\n  text: PropTypes.string.isRequired,\n  alternativeIndex: PropTypes.number.isRequired,\n  answerClick: PropTypes.func.isRequired,\n  styleAlternative: PropTypes.bool.isRequired,\n  countDown: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport decodeHtml from '../../helpers/htmldecode';\nimport '../../styles/Questions/CorrectAnswer.css';\n\nclass CorrectAnswer extends Component {\n  render() {\n    const { text, answerClick, styleAlternative, countDown } = this.props;\n    const styles = {\n      border: '3px solid rgb(6, 240, 15)',\n    };\n    return (\n      <button\n        type=\"button\"\n        data-testid=\"correct-answer\"\n        onClick={ (e) => answerClick(e) }\n        style={ styleAlternative ? styles : null }\n        disabled={ countDown === 0 }\n      >\n        {decodeHtml(text)}\n      </button>\n    );\n  }\n}\n\nexport default CorrectAnswer;\n\nCorrectAnswer.propTypes = {\n  text: PropTypes.string.isRequired,\n  answerClick: PropTypes.func.isRequired,\n  styleAlternative: PropTypes.bool.isRequired,\n  countDown: PropTypes.number.isRequired,\n};\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport WrongAnswer from './WrongAnswer';\nimport CorrectAnswer from './CorrectAnswer';\n\nclass AlternativesContainer extends Component {\n  constructor() {\n    super();\n    this.renderAlternatives = this.renderAlternatives.bind(this);\n  }\n\n  renderAlternatives() {\n    const { alternatives,\n      styleAlternative,\n      countDown,\n      answerClick } = this.props;\n\n    const alternativesList = alternatives.map((text, alternativeIndex, array) => {\n      if (text === array[array.length - 1]) {\n        return (<CorrectAnswer\n          key={ text }\n          text={ text }\n          styleAlternative={ styleAlternative }\n          answerClick={ answerClick }\n          countDown={ countDown }\n        />);\n      }\n      return (<WrongAnswer\n        key={ text }\n        text={ text }\n        alternativeIndex={ alternativeIndex }\n        styleAlternative={ styleAlternative }\n        answerClick={ answerClick }\n        countDown={ countDown }\n      />);\n    });\n    return alternativesList;\n  }\n\n  render() {\n    return (\n      <>\n        {this.renderAlternatives().sort((a, b) => {\n          const lessOne = -1;\n          const one = 1;\n          if (b.key > a.key) { return lessOne; } return one;\n        })}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.triviaReducer.questions,\n});\n\nexport default connect(mapStateToProps)(AlternativesContainer);\n\nAlternativesContainer.propTypes = {\n  styleAlternative: PropTypes.bool.isRequired,\n  countDown: PropTypes.number.isRequired,\n  answerClick: PropTypes.func.isRequired,\n  alternatives: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/NextAndFeedback.css';\n\nexport default class NextAndFeedback extends Component {\n  render() {\n    const { index, length, nextQuestion, history } = this.props;\n    return (\n      <button\n        onClick={ () => (index < length ? nextQuestion() : history.push('/feedback')) }\n        type=\"button\"\n        data-testid=\"btn-next\"\n      >\n        {index < length ? 'Próxima pergunta' : 'Feedback'}\n      </button>\n    );\n  }\n}\n\nNextAndFeedback.propTypes = {\n  index: PropTypes.number.isRequired,\n  length: PropTypes.number.isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { questionsRequest, sectionUser } from '../actions';\nimport AlternativesContainer from './subComponents/AlternativesContainer';\nimport NextAndFeedback from './NextAndFeedback';\nimport decodeHtml from '../helpers/htmldecode';\nimport '../styles/Questions/Questions.css';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionIndex: 0,\n      questions: [],\n      styleAlternative: false,\n      countDown: 30,\n      assertions: 0,\n      score: 0,\n    };\n\n    this.handleState = this.handleState.bind(this);\n    this.answerClick = this.answerClick.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.updateTimer = this.updateTimer.bind(this);\n    this.difficult = this.difficult.bind(this);\n    this.throwToLocalStorage = this.throwToLocalStorage.bind(this);\n  }\n\n  async componentDidMount() {\n    const state = {\n      player: {\n        name: '',\n        assertions: 0,\n        score: 0,\n        gravatarEmail: '',\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n\n    const { requestQuestions } = this.props;\n    const token = localStorage.getItem('token');\n    await requestQuestions(token);\n    const { questions } = this.props;\n    this.handleState(questions);\n    this.updateTimer();\n  }\n\n  updateTimer() {\n    const ThirtySeconds = 30;\n    let i = ThirtySeconds;\n    const oneSecond = 1000;\n    this.interval = setInterval(() => {\n      if (i === 0) {\n        this.setState({\n          styleAlternative: true,\n        });\n        clearInterval(this.interval);\n      }\n\n      this.setState({\n        countDown: i,\n      });\n      i -= 1;\n    }, oneSecond);\n  }\n\n  handleState(questions) {\n    this.setState({\n      questions: questions.results,\n    });\n  }\n\n  throwToLocalStorage() {\n    const { email, username, section } = this.props;\n    const { assertions, score } = this.state;\n    const state = {\n      player: {\n        name: username,\n        assertions,\n        score,\n        gravatarEmail: email,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n    section(state.player);\n  }\n\n  nextQuestion() {\n    const { questionIndex } = this.state;\n    this.setState({\n      questionIndex: questionIndex + 1,\n      styleAlternative: false,\n    });\n    this.updateTimer();\n  }\n\n  difficult(difficultLevel) {\n    const three = '3';\n    switch (difficultLevel.difficulty) {\n    case 'easy':\n      return 1;\n    case 'medium':\n      return 2;\n    case 'hard':\n      return three; // 3\n    default:\n      return null;\n    }\n  }\n\n  async answerClick({ target }) {\n    const { questions } = this.props;\n    const { questionIndex, assertions, countDown, score } = this.state;\n    this.setState({\n      styleAlternative: true,\n    });\n\n    if (questions.results[questionIndex].correct_answer === target.innerHTML) {\n      const def = 10;\n      const questionScore = (def + (countDown * this\n        .difficult(questions.results[questionIndex])));\n      this.setState({\n        assertions: assertions + 1,\n        score: score + questionScore,\n      });\n\n      this.setState({}, () => this.throwToLocalStorage());\n    } else {\n      this.throwToLocalStorage();\n    }\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const { questions, questionIndex, styleAlternative, countDown } = this.state;\n    const { history } = this.props;\n\n    return questions.length === 0 ? (\n      <div>Loading</div>\n    ) : (\n      <div className=\"questions\">\n        {questions.map(({ category, question,\n          correct_answer: correctAnswer,\n          incorrect_answers: incorrectAnswers }, index) => {\n          if (questionIndex === index) {\n            return (\n              <div key={ index }>\n                <p>\n                  Tempo restante:\n                  {` ${countDown}`}\n                </p>\n                <p data-testid=\"question-text\">{category}</p>\n                <p data-testid=\"question-category\">{decodeHtml(question)}</p>\n                <div className=\"alternatives-container\">\n                  <AlternativesContainer\n                    alternatives={ [...incorrectAnswers, correctAnswer] }\n                    styleAlternative={ styleAlternative }\n                    countDown={ countDown }\n                    answerClick={ this.answerClick }\n                    index={ index }\n                  />\n                </div>\n                { styleAlternative ? (\n                  <NextAndFeedback\n                    index={ questionIndex }\n                    length={ questions.length - 1 }\n                    nextQuestion={ this.nextQuestion }\n                    history={ history }\n                  />\n                ) : null }\n              </div>\n            );\n          }\n          return null;\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.triviaReducer.questions,\n  email: state.loginReducer.email,\n  username: state.loginReducer.name,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuestions: (token) => dispatch(questionsRequest(token)),\n  section: (section) => dispatch(sectionUser(section)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n\nQuestions.propTypes = {\n  questions: PropTypes.shape({\n    results: PropTypes.shape({\n      category: PropTypes.string,\n    }),\n  }).isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n  section: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n  username: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/ScoreBoard.css';\n\nclass ScoreBoard extends Component {\n  render() {\n    const { sectionPlayer: { score } } = this.props;\n    const zero = 0;\n    return (\n      <div>\n        {'Placar: '}\n        <span data-testid=\"header-score\">\n          {score || zero}\n        </span>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  sectionPlayer: state.sectionReducer.player,\n});\n\nexport default connect(mapStateToProps)(ScoreBoard);\n\nScoreBoard.propTypes = {\n  sectionPlayer: PropTypes.shape({\n    score: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport Questions from '../components/Questions';\nimport ScoreBoard from '../components/ScoreBoard';\nimport '../styles/Game.css';\n\nclass Game extends Component {\n  md5Converter(email) {\n    const md5Email = md5(email).toString();\n    return `https://www.gravatar.com/avatar/${md5Email}/`;\n  }\n\n  render() {\n    const { player, history } = this.props;\n    const { email, name } = player;\n\n    return (\n      <div className=\"game\">\n        <header>\n          <div>\n            <img\n              alt={ `Avatar de ${name}` }\n              data-testid=\"header-profile-picture\"\n              src={ this.md5Converter(email) }\n            />\n            <p>\n              {'Jogador: '}\n              <span data-testid=\"header-player-name\">\n                {name}\n              </span>\n            </p>\n          </div>\n          <ScoreBoard />\n        </header>\n        <Questions history={ history } />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  player: state.loginReducer,\n  token: state.triviaReducer.sectionTriviaToken,\n});\n\nexport default connect(mapStateToProps, null)(Game);\n\nGame.propTypes = {\n  player: PropTypes.shape({\n    email: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\n\nexport default class Settings extends Component {\n  render() {\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">Configurações do jogo</h1>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport '../styles/Feedback.css';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n    this.sendPlayerInfoToRanking = this.sendPlayerInfoToRanking.bind(this);\n  }\n\n  componentDidMount() {\n    this.sendPlayerInfoToRanking();\n  }\n\n  scoreMessage(assertions) {\n    const minimumAssertion = 3;\n    if (assertions < minimumAssertion) {\n      return 'Podia ser melhor...';\n    }\n    return 'Mandou bem!';\n  }\n\n  sendPlayerInfoToRanking() {\n    const { ranking } = localStorage;\n    const { sectionPlayer: player } = this.props;\n    const { name, score, gravatarEmail } = player;\n    const gravatarHash = md5(gravatarEmail).toString();\n\n    const avatarURL = `https://www.gravatar.com/avatar/${gravatarHash}`;\n    if (ranking) {\n      localStorage.getItem('ranking', []);\n      const oldRanking = JSON.parse(ranking);\n      const newRanking = oldRanking.concat({\n        name,\n        score,\n        picture: avatarURL,\n      });\n      return localStorage.setItem('ranking', JSON.stringify(newRanking));\n    }\n    const emptyRanking = {\n      name,\n      score,\n      picture: avatarURL,\n    };\n\n    return localStorage.setItem('ranking', JSON.stringify([emptyRanking]));\n  }\n\n  render() {\n    const { history, sectionPlayer: player } = this.props;\n    const { name, score, gravatarEmail, assertions } = player;\n    const gravatarHash = md5(gravatarEmail).toString();\n\n    return (\n      <div data-testid=\"feedback-text\">\n        <h1>{this.scoreMessage(assertions)}</h1>\n        <h1>\n          {'Jogador: '}\n          <span data-testid=\"header-player-name\">{ name }</span>\n          {' acertou '}\n          <span data-testid=\"feedback-total-question\">{ assertions }</span>\n          {' questões.'}\n        </h1>\n        <img\n          alt=\"avatar\"\n          src={ `https://www.gravatar.com/avatar/${gravatarHash}` }\n          data-testid=\"header-profile-picture\"\n        />\n        <p>\n          {/* Lembrar de criar o componente header\n          para mostrar placar e o resto. Req 14, tá no figma */}\n          Pontuação:\n          <span data-testid=\"header-score\">{score}</span>\n          <span data-testid=\"feedback-total-score\">{score}</span>\n        </p>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play-again\"\n          onClick={ () => history.push('/') }\n        >\n          Jogar novamente\n        </button>\n        <button\n          data-testid=\"btn-ranking\"\n          type=\"button\"\n          onClick={ () => history.push('/ranking') }\n        >\n          Ver Ranking\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  sectionPlayer: state.sectionReducer.player,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n\nFeedback.propTypes = {\n  sectionPlayer: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    gravatarEmail: PropTypes.string.isRequired,\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/Ranking.css';\n\nclass Ranking extends Component {\n  rankingSortPodium(ranking) {\n    ranking.sort((a, b) => {\n      const one = 1;\n      const lessOne = -1;\n      if (a.score > b.score) { return lessOne; } return one;\n    });\n    return ranking;\n  }\n\n  render() {\n    const { history } = this.props;\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    return (\n      <div>\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        { this.rankingSortPodium(ranking)\n          .map(({ name, picture, score }, index) => (\n            <div key={ name }>\n              <img alt={ `Avatar de ${name}` } src={ picture } />\n              <p data-testid={ `player-name-${index}` }>{name}</p>\n              <span data-testid={ `player-score-${index}` }>{score}</span>\n            </div>))}\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ () => history.push('/') }\n        >\n          Ir para o início\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" component={ Login } />\n          <Route exact path=\"/game\" component={ Game } />\n          <Route exact path=\"/settings\" component={ Settings } />\n          <Route exact path=\"/feedback\" component={ Feedback } />\n          <Route exact path=\"/ranking\" component={ Ranking } />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as type from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  email: '',\n  name: '',\n};\n\nconst loginReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case type.LOGIN:\n    return {\n      email: action.data.email,\n      name: action.data.name,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default loginReducer;\n","import { TOKEN_REQUEST_SUCCESS, QUESTIONS_REQUEST } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  sectionTriviaToken: '',\n  questions: {},\n};\n\nconst triviaReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case TOKEN_REQUEST_SUCCESS:\n    return {\n      ...state, sectionTriviaToken: action.token,\n    };\n  case QUESTIONS_REQUEST:\n    return {\n      ...state, questions: action.questions,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default triviaReducer;\n","// create a reducer to manage the login state\nimport { SECTION_USER } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  player: {\n    name: '',\n    assertions: 0,\n    score: 0,\n    gravatarEmail: '',\n  },\n};\n\nconst sectionReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SECTION_USER:\n    return {\n      ...state,\n      player: {\n        name: action.section.name,\n        assertions: action.section.assertions,\n        score: action.section.score,\n        gravatarEmail: action.section.gravatarEmail,\n      },\n    };\n  default:\n    return state;\n  }\n};\n\nexport default sectionReducer;\n","import { combineReducers } from 'redux';\nimport loginReducer from './loginReducer';\nimport triviaReducer from './triviaReducer';\nimport sectionReducer from './sectionReducer';\n\nconst rootReducer = combineReducers({\n  loginReducer,\n  triviaReducer,\n  sectionReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}