{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/components/Questions.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { questionsRequest } from '../actions';\n\nclass Questions extends Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     questions: [],\n  //   };\n  // }\n  async componentDidMount() {\n    const requestQuestions = this.props.requestQuestions;\n    const token = localStorage.getItem('token');\n    await requestQuestions(token);\n  }\n\n  render() {\n    const questions = this.props.questions;\n    const results = questions.results;\n\n    if (!questions) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Loading\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, results.filter((question, index) => React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, question.category)));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questions: state.triviaReducer.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  requestQuestions: token => dispatch(questionsRequest(token))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/components/Questions.jsx"],"names":["React","Component","connect","questionsRequest","Questions","componentDidMount","requestQuestions","props","token","localStorage","getItem","render","questions","results","filter","question","index","category","mapStateToProps","state","triviaReducer","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,YAAjC;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAChC;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMI,iBAAN,GAA0B;AAAA,UAChBC,gBADgB,GACK,KAAKC,KADV,CAChBD,gBADgB;AAExB,UAAME,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AAEA,UAAMJ,gBAAgB,CAACE,KAAD,CAAtB;AACD;;AAEDG,EAAAA,MAAM,GAAG;AAAA,UACCC,SADD,GACe,KAAKL,KADpB,CACCK,SADD;AAAA,UAECC,OAFD,GAEaD,SAFb,CAECC,OAFD;;AAGP,QAAI,CAACD,SAAL,EAAgB;AACd,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAR;AACD;;AAED,WAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIC,OAAO,CAACC,MAAR,CAAe,CAACC,QAAD,EAAWC,KAAX,KACf;AAAG,qBAAY,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoCD,QAAQ,CAACE,QAA7C,CADA,CADJ,CAFF;AAQD;;AA9B+B;;AAiClC,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCP,EAAAA,SAAS,EAAEO,KAAK,CAACC,aAAN,CAAoBR;AADG,CAAZ,CAAxB;;AAIA,MAAMS,kBAAkB,GAAIC,QAAD,KAAe;AACxChB,EAAAA,gBAAgB,EAAGE,KAAD,IAAWc,QAAQ,CAACnB,gBAAgB,CAACK,KAAD,CAAjB;AADG,CAAf,CAA3B;;AAIA,eAAeN,OAAO,CAACgB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CjB,SAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { questionsRequest } from '../actions';\n\nclass Questions extends Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     questions: [],\n  //   };\n  // }\n\n  async componentDidMount() {\n    const { requestQuestions } = this.props;\n    const token = localStorage.getItem('token');\n\n    await requestQuestions(token);\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { results } = questions;\n    if (!questions) {\n      return (<p>Loading</p>);\n    }\n\n    return (\n\n      <div>\n        { results.filter((question, index) => (\n          <p data-testid=\"question-category\">{question.category}</p>)\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.triviaReducer.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuestions: (token) => dispatch(questionsRequest(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}