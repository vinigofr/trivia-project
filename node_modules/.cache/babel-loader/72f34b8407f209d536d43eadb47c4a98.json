{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/pages/Feedback.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\n\nclass Feedback extends Component {\n  componentDidMount() {// localStorage.setItem('ranking', []);\n  }\n\n  scoreMessage(assertions) {\n    const minimumAssertion = 3;\n\n    if (assertions < minimumAssertion) {\n      return 'Podia ser melhor...';\n    }\n\n    return 'Mandou bem!';\n  }\n\n  sendPlayerInfoToRanking() {\n    const _localStorage = localStorage,\n          ranking = _localStorage.ranking;\n\n    if (ranking) {\n      localStorage.getItem('ranking', []);\n      const oldRanking = JSON.parse(ranking);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          history = _this$props.history,\n          player = _this$props.sectionPlayer;\n    const name = player.name,\n          score = player.score,\n          gravatarEmail = player.gravatarEmail,\n          assertions = player.assertions;\n    const gravatarHash = md5(gravatarEmail).toString();\n    return React.createElement(\"div\", {\n      \"data-testid\": \"feedback-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, this.scoreMessage(assertions)), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, 'Jogador: ', React.createElement(\"span\", {\n      \"data-testid\": \"header-player-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, name), ' acertou ', React.createElement(\"span\", {\n      \"data-testid\": \"feedback-total-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, assertions), ' questões.'), React.createElement(\"img\", {\n      alt: \"avatar\",\n      src: `https://www.gravatar.com/avatar/${gravatarHash}`,\n      \"data-testid\": \"header-profile-picture\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Pontua\\xE7\\xE3o:\", React.createElement(\"span\", {\n      \"data-testid\": \"header-score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, score), React.createElement(\"span\", {\n      \"data-testid\": \"feedback-total-score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, score)), React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-play-again\",\n      onClick: () => history.push('/'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Jogar novamente\"), React.createElement(\"button\", {\n      \"data-testid\": \"btn-ranking\",\n      type: \"button\",\n      onClick: () => history.push('/ranking'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Ver Ranking\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  sectionPlayer: state.sectionReducer.player\n});\n\nexport default connect(mapStateToProps)(Feedback);\nFeedback.propTypes = {\n  sectionPlayer: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    gravatarEmail: PropTypes.string.isRequired\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/pages/Feedback.jsx"],"names":["React","Component","connect","md5","PropTypes","Feedback","componentDidMount","scoreMessage","assertions","minimumAssertion","sendPlayerInfoToRanking","localStorage","ranking","getItem","oldRanking","JSON","parse","render","props","history","player","sectionPlayer","name","score","gravatarEmail","gravatarHash","toString","push","mapStateToProps","state","sectionReducer","propTypes","shape","string","isRequired","number","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\n\nclass Feedback extends Component {\n  componentDidMount() {\n    // localStorage.setItem('ranking', []);\n  }\n\n  scoreMessage(assertions) {\n    const minimumAssertion = 3;\n    if (assertions < minimumAssertion) {\n      return 'Podia ser melhor...';\n    }\n    return 'Mandou bem!';\n  }\n\n  sendPlayerInfoToRanking() {\n    const { ranking } = localStorage;\n    if (ranking) {\n      localStorage.getItem('ranking', []);\n      const oldRanking = JSON.parse(ranking);\n    }\n  }\n\n  render() {\n    const { history, sectionPlayer: player } = this.props;\n    const { name, score, gravatarEmail, assertions } = player;\n    const gravatarHash = md5(gravatarEmail).toString();\n\n    return (\n      <div data-testid=\"feedback-text\">\n        <h1>{this.scoreMessage(assertions)}</h1>\n        <h1>\n          {'Jogador: '}\n          <span data-testid=\"header-player-name\">{ name }</span>\n          {' acertou '}\n          <span data-testid=\"feedback-total-question\">{ assertions }</span>\n          {' questões.'}\n        </h1>\n        <img\n          alt=\"avatar\"\n          src={ `https://www.gravatar.com/avatar/${gravatarHash}` }\n          data-testid=\"header-profile-picture\"\n        />\n        <p>\n          {/* Lembrar de criar o componente header\n          para mostrar placar e o resto. Req 14, tá no figma */}\n          Pontuação:\n          <span data-testid=\"header-score\">{score}</span>\n          <span data-testid=\"feedback-total-score\">{score}</span>\n        </p>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play-again\"\n          onClick={ () => history.push('/') }\n        >\n          Jogar novamente\n        </button>\n        <button\n          data-testid=\"btn-ranking\"\n          type=\"button\"\n          onClick={ () => history.push('/ranking') }\n        >\n          Ver Ranking\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  sectionPlayer: state.sectionReducer.player,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n\nFeedback.propTypes = {\n  sectionPlayer: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    gravatarEmail: PropTypes.string.isRequired,\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}