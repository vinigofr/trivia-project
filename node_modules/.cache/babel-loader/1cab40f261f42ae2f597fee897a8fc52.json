{"ast":null,"code":"'use strict';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nconst prompts = require('./prompts');\n\nconst passOn = ['suggest', 'format', 'onState', 'validate', 'onRender', 'type'];\n\nconst noop = () => {};\n/**\n * Prompt for a series of questions\n * @param {Array|Object} questions Single question object or Array of question objects\n * @param {Function} [onSubmit] Callback function called on prompt submit\n * @param {Function} [onCancel] Callback function called on cancel/abort\n * @returns {Object} Object with values from user input\n */\n\n\nfunction prompt() {\n  return _prompt.apply(this, arguments);\n}\n\nfunction _prompt() {\n  _prompt = _asyncToGenerator(function* (questions = [], {\n    onSubmit = noop,\n    onCancel = noop\n  } = {}) {\n    const answers = {};\n    const override = prompt._override || {};\n    questions = [].concat(questions);\n    let answer, question, quit, name, type, lastPrompt;\n\n    const getFormattedAnswer =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(function* (question, answer, skipValidation = false) {\n        if (!skipValidation && question.validate && question.validate(answer) !== true) {\n          return;\n        }\n\n        return question.format ? yield question.format(answer, answers) : answer;\n      });\n\n      return function getFormattedAnswer(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = questions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        question = _step.value;\n        var _question = question;\n        name = _question.name;\n        type = _question.type; // evaluate type first and skip if type is a falsy value\n\n        if (typeof type === 'function') {\n          type = yield type(answer, _objectSpread({}, answers), question);\n          question['type'] = type;\n        }\n\n        if (!type) continue; // if property is a function, invoke it unless it's a special function\n\n        for (let key in question) {\n          if (passOn.includes(key)) continue;\n          let value = question[key];\n          question[key] = typeof value === 'function' ? yield value(answer, _objectSpread({}, answers), lastPrompt) : value;\n        }\n\n        lastPrompt = question;\n\n        if (typeof question.message !== 'string') {\n          throw new Error('prompt message is required');\n        } // update vars in case they changed\n\n\n        var _question2 = question;\n        name = _question2.name;\n        type = _question2.type;\n\n        if (prompts[type] === void 0) {\n          throw new Error(`prompt type (${type}) is not defined`);\n        }\n\n        if (override[question.name] !== undefined) {\n          answer = yield getFormattedAnswer(question, override[question.name]);\n\n          if (answer !== undefined) {\n            answers[name] = answer;\n            continue;\n          }\n        }\n\n        try {\n          // Get the injected answer if there is one or prompt the user\n          answer = prompt._injected ? getInjectedAnswer(prompt._injected) : yield prompts[type](question);\n          answers[name] = answer = yield getFormattedAnswer(question, answer, true);\n          quit = yield onSubmit(question, answer, answers);\n        } catch (err) {\n          quit = !(yield onCancel(question, answers));\n        }\n\n        if (quit) return answers;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return answers;\n  });\n  return _prompt.apply(this, arguments);\n}\n\nfunction getInjectedAnswer(injected) {\n  const answer = injected.shift();\n\n  if (answer instanceof Error) {\n    throw answer;\n  }\n\n  return answer;\n}\n\nfunction inject(answers) {\n  prompt._injected = (prompt._injected || []).concat(answers);\n}\n\nfunction override(answers) {\n  prompt._override = Object.assign({}, answers);\n}\n\nmodule.exports = Object.assign(prompt, {\n  prompt,\n  prompts,\n  inject,\n  override\n});","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/node_modules/prompts/dist/index.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","err","undefined","prompts","require","passOn","noop","prompt","_prompt","questions","onSubmit","onCancel","answers","override","_override","concat","answer","question","quit","name","type","lastPrompt","getFormattedAnswer","_ref","skipValidation","validate","format","_x","_x2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","_question","includes","message","Error","_question2","_injected","getInjectedAnswer","return","injected","shift","inject","assign","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nconst prompts = require('./prompts');\n\nconst passOn = ['suggest', 'format', 'onState', 'validate', 'onRender', 'type'];\n\nconst noop = () => {};\n/**\n * Prompt for a series of questions\n * @param {Array|Object} questions Single question object or Array of question objects\n * @param {Function} [onSubmit] Callback function called on prompt submit\n * @param {Function} [onCancel] Callback function called on cancel/abort\n * @returns {Object} Object with values from user input\n */\n\n\nfunction prompt() {\n  return _prompt.apply(this, arguments);\n}\n\nfunction _prompt() {\n  _prompt = _asyncToGenerator(function* (questions = [], {\n    onSubmit = noop,\n    onCancel = noop\n  } = {}) {\n    const answers = {};\n    const override = prompt._override || {};\n    questions = [].concat(questions);\n    let answer, question, quit, name, type, lastPrompt;\n\n    const getFormattedAnswer =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(function* (question, answer, skipValidation = false) {\n        if (!skipValidation && question.validate && question.validate(answer) !== true) {\n          return;\n        }\n\n        return question.format ? yield question.format(answer, answers) : answer;\n      });\n\n      return function getFormattedAnswer(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = questions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        question = _step.value;\n        var _question = question;\n        name = _question.name;\n        type = _question.type;\n\n        // evaluate type first and skip if type is a falsy value\n        if (typeof type === 'function') {\n          type = yield type(answer, _objectSpread({}, answers), question);\n          question['type'] = type;\n        }\n\n        if (!type) continue; // if property is a function, invoke it unless it's a special function\n\n        for (let key in question) {\n          if (passOn.includes(key)) continue;\n          let value = question[key];\n          question[key] = typeof value === 'function' ? yield value(answer, _objectSpread({}, answers), lastPrompt) : value;\n        }\n\n        lastPrompt = question;\n\n        if (typeof question.message !== 'string') {\n          throw new Error('prompt message is required');\n        } // update vars in case they changed\n\n\n        var _question2 = question;\n        name = _question2.name;\n        type = _question2.type;\n\n        if (prompts[type] === void 0) {\n          throw new Error(`prompt type (${type}) is not defined`);\n        }\n\n        if (override[question.name] !== undefined) {\n          answer = yield getFormattedAnswer(question, override[question.name]);\n\n          if (answer !== undefined) {\n            answers[name] = answer;\n            continue;\n          }\n        }\n\n        try {\n          // Get the injected answer if there is one or prompt the user\n          answer = prompt._injected ? getInjectedAnswer(prompt._injected) : yield prompts[type](question);\n          answers[name] = answer = yield getFormattedAnswer(question, answer, true);\n          quit = yield onSubmit(question, answer, answers);\n        } catch (err) {\n          quit = !(yield onCancel(question, answers));\n        }\n\n        if (quit) return answers;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return answers;\n  });\n  return _prompt.apply(this, arguments);\n}\n\nfunction getInjectedAnswer(injected) {\n  const answer = injected.shift();\n\n  if (answer instanceof Error) {\n    throw answer;\n  }\n\n  return answer;\n}\n\nfunction inject(answers) {\n  prompt._injected = (prompt._injected || []).concat(answers);\n}\n\nfunction override(answers) {\n  prompt._override = Object.assign({}, answers);\n}\n\nmodule.exports = Object.assign(prompt, {\n  prompt,\n  prompts,\n  inject,\n  override\n});"]},"metadata":{},"sourceType":"script"}