{"ast":null,"code":"'use strict';\n\nconst $ = exports;\n\nconst el = require('./elements');\n\nconst noop = v => v;\n\nfunction toPrompt(type, args, opts = {}) {\n  return new Promise((res, rej) => {\n    const p = new el[type](args);\n    const onAbort = opts.onAbort || noop;\n    const onSubmit = opts.onSubmit || noop;\n    p.on('state', args.onState || noop);\n    p.on('submit', x => res(onSubmit(x)));\n    p.on('abort', x => rej(onAbort(x)));\n  });\n}\n/**\n * Text prompt\n * @param {string} args.message Prompt message to display\n * @param {string} [args.initial] Default string value\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {function} [args.onState] On state change callback\n * @param {function} [args.validate] Function to validate user input\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n\n\n$.text = args => toPrompt('TextPrompt', args);\n/**\n * Password prompt with masked input\n * @param {string} args.message Prompt message to display\n * @param {string} [args.initial] Default string value\n * @param {function} [args.onState] On state change callback\n * @param {function} [args.validate] Function to validate user input\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n\n\n$.password = args => {\n  args.style = 'password';\n  return $.text(args);\n};\n/**\n * Prompt where input is invisible, like sudo\n * @param {string} args.message Prompt message to display\n * @param {string} [args.initial] Default string value\n * @param {function} [args.onState] On state change callback\n * @param {function} [args.validate] Function to validate user input\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n\n\n$.invisible = args => {\n  args.style = 'invisible';\n  return $.text(args);\n};\n/**\n * Number prompt\n * @param {string} args.message Prompt message to display\n * @param {number} args.initial Default number value\n * @param {function} [args.onState] On state change callback\n * @param {number} [args.max] Max value\n * @param {number} [args.min] Min value\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {Boolean} [opts.float=false] Parse input as floats\n * @param {Number} [opts.round=2] Round floats to x decimals\n * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys\n * @param {function} [args.validate] Function to validate user input\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n\n\n$.number = args => toPrompt('NumberPrompt', args);\n/**\n * Date prompt\n * @param {string} args.message Prompt message to display\n * @param {number} args.initial Default number value\n * @param {function} [args.onState] On state change callback\n * @param {number} [args.max] Max value\n * @param {number} [args.min] Min value\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {Boolean} [opts.float=false] Parse input as floats\n * @param {Number} [opts.round=2] Round floats to x decimals\n * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys\n * @param {function} [args.validate] Function to validate user input\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n\n\n$.date = args => toPrompt('DatePrompt', args);\n/**\n * Classic yes/no prompt\n * @param {string} args.message Prompt message to display\n * @param {boolean} [args.initial=false] Default value\n * @param {function} [args.onState] On state change callback\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n\n\n$.confirm = args => toPrompt('ConfirmPrompt', args);\n/**\n * List prompt, split intput string by `seperator`\n * @param {string} args.message Prompt message to display\n * @param {string} [args.initial] Default string value\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {string} [args.separator] String separator\n * @param {function} [args.onState] On state change callback\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input, in form of an `Array`\n */\n\n\n$.list = args => {\n  const sep = args.separator || ',';\n  return toPrompt('TextPrompt', args, {\n    onSubmit: str => str.split(sep).map(s => s.trim())\n  });\n};\n/**\n * Toggle/switch prompt\n * @param {string} args.message Prompt message to display\n * @param {boolean} [args.initial=false] Default value\n * @param {string} [args.active=\"on\"] Text for `active` state\n * @param {string} [args.inactive=\"off\"] Text for `inactive` state\n * @param {function} [args.onState] On state change callback\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n\n\n$.toggle = args => toPrompt('TogglePrompt', args);\n/**\n * Interactive select prompt\n * @param {string} args.message Prompt message to display\n * @param {Array} args.choices Array of choices objects `[{ title, value }, ...]`\n * @param {number} [args.initial] Index of default value\n * @param {String} [args.hint] Hint to display\n * @param {function} [args.onState] On state change callback\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n\n\n$.select = args => toPrompt('SelectPrompt', args);\n/**\n * Interactive multi-select / autocompleteMultiselect prompt\n * @param {string} args.message Prompt message to display\n * @param {Array} args.choices Array of choices objects `[{ title, value, [selected] }, ...]`\n * @param {number} [args.max] Max select\n * @param {string} [args.hint] Hint to display user\n * @param {Number} [args.cursor=0] Cursor start position\n * @param {function} [args.onState] On state change callback\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n\n\n$.multiselect = args => {\n  args.choices = [].concat(args.choices || []);\n\n  const toSelected = items => items.filter(item => item.selected).map(item => item.value);\n\n  return toPrompt('MultiselectPrompt', args, {\n    onAbort: toSelected,\n    onSubmit: toSelected\n  });\n};\n\n$.autocompleteMultiselect = args => {\n  args.choices = [].concat(args.choices || []);\n\n  const toSelected = items => items.filter(item => item.selected).map(item => item.value);\n\n  return toPrompt('AutocompleteMultiselectPrompt', args, {\n    onAbort: toSelected,\n    onSubmit: toSelected\n  });\n};\n\nconst byTitle = (input, choices) => Promise.resolve(choices.filter(item => item.title.slice(0, input.length).toLowerCase() === input.toLowerCase()));\n/**\n * Interactive auto-complete prompt\n * @param {string} args.message Prompt message to display\n * @param {Array} args.choices Array of auto-complete choices objects `[{ title, value }, ...]`\n * @param {Function} [args.suggest] Function to filter results based on user input. Defaults to sort by `title`\n * @param {number} [args.limit=10] Max number of results to show\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {String} [args.initial] Index of the default value\n * @param {String} [args.fallback] Fallback message - defaults to initial value\n * @param {function} [args.onState] On state change callback\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n\n\n$.autocomplete = args => {\n  args.suggest = args.suggest || byTitle;\n  args.choices = [].concat(args.choices || []);\n  return toPrompt('AutocompletePrompt', args);\n};","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/node_modules/prompts/lib/prompts.js"],"names":["$","exports","el","require","noop","v","toPrompt","type","args","opts","Promise","res","rej","p","onAbort","onSubmit","on","onState","x","text","password","style","invisible","number","date","confirm","list","sep","separator","str","split","map","s","trim","toggle","select","multiselect","choices","concat","toSelected","items","filter","item","selected","value","autocompleteMultiselect","byTitle","input","resolve","title","slice","length","toLowerCase","autocomplete","suggest"],"mappings":"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","sourcesContent":["'use strict';\nconst $ = exports;\nconst el = require('./elements');\nconst noop = v => v;\n\nfunction toPrompt(type, args, opts={}) {\n  return new Promise((res, rej) => {\n    const p = new el[type](args);\n    const onAbort = opts.onAbort || noop;\n    const onSubmit = opts.onSubmit || noop;\n    p.on('state', args.onState || noop);\n    p.on('submit', x => res(onSubmit(x)));\n    p.on('abort', x => rej(onAbort(x)));\n  });\n}\n\n/**\n * Text prompt\n * @param {string} args.message Prompt message to display\n * @param {string} [args.initial] Default string value\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {function} [args.onState] On state change callback\n * @param {function} [args.validate] Function to validate user input\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n$.text = args => toPrompt('TextPrompt', args);\n\n/**\n * Password prompt with masked input\n * @param {string} args.message Prompt message to display\n * @param {string} [args.initial] Default string value\n * @param {function} [args.onState] On state change callback\n * @param {function} [args.validate] Function to validate user input\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n$.password = args => {\n  args.style = 'password';\n  return $.text(args);\n};\n\n/**\n * Prompt where input is invisible, like sudo\n * @param {string} args.message Prompt message to display\n * @param {string} [args.initial] Default string value\n * @param {function} [args.onState] On state change callback\n * @param {function} [args.validate] Function to validate user input\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n$.invisible = args => {\n  args.style = 'invisible';\n  return $.text(args);\n};\n\n/**\n * Number prompt\n * @param {string} args.message Prompt message to display\n * @param {number} args.initial Default number value\n * @param {function} [args.onState] On state change callback\n * @param {number} [args.max] Max value\n * @param {number} [args.min] Min value\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {Boolean} [opts.float=false] Parse input as floats\n * @param {Number} [opts.round=2] Round floats to x decimals\n * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys\n * @param {function} [args.validate] Function to validate user input\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n$.number = args => toPrompt('NumberPrompt', args);\n\n/**\n * Date prompt\n * @param {string} args.message Prompt message to display\n * @param {number} args.initial Default number value\n * @param {function} [args.onState] On state change callback\n * @param {number} [args.max] Max value\n * @param {number} [args.min] Min value\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {Boolean} [opts.float=false] Parse input as floats\n * @param {Number} [opts.round=2] Round floats to x decimals\n * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys\n * @param {function} [args.validate] Function to validate user input\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n$.date = args => toPrompt('DatePrompt', args);\n\n/**\n * Classic yes/no prompt\n * @param {string} args.message Prompt message to display\n * @param {boolean} [args.initial=false] Default value\n * @param {function} [args.onState] On state change callback\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n$.confirm = args => toPrompt('ConfirmPrompt', args);\n\n/**\n * List prompt, split intput string by `seperator`\n * @param {string} args.message Prompt message to display\n * @param {string} [args.initial] Default string value\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {string} [args.separator] String separator\n * @param {function} [args.onState] On state change callback\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input, in form of an `Array`\n */\n$.list = args => {\n  const sep = args.separator || ',';\n  return toPrompt('TextPrompt', args, {\n    onSubmit: str => str.split(sep).map(s => s.trim())\n  });\n};\n\n/**\n * Toggle/switch prompt\n * @param {string} args.message Prompt message to display\n * @param {boolean} [args.initial=false] Default value\n * @param {string} [args.active=\"on\"] Text for `active` state\n * @param {string} [args.inactive=\"off\"] Text for `inactive` state\n * @param {function} [args.onState] On state change callback\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n$.toggle = args => toPrompt('TogglePrompt', args);\n\n/**\n * Interactive select prompt\n * @param {string} args.message Prompt message to display\n * @param {Array} args.choices Array of choices objects `[{ title, value }, ...]`\n * @param {number} [args.initial] Index of default value\n * @param {String} [args.hint] Hint to display\n * @param {function} [args.onState] On state change callback\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n$.select = args => toPrompt('SelectPrompt', args);\n\n/**\n * Interactive multi-select / autocompleteMultiselect prompt\n * @param {string} args.message Prompt message to display\n * @param {Array} args.choices Array of choices objects `[{ title, value, [selected] }, ...]`\n * @param {number} [args.max] Max select\n * @param {string} [args.hint] Hint to display user\n * @param {Number} [args.cursor=0] Cursor start position\n * @param {function} [args.onState] On state change callback\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n$.multiselect = args => {\n  args.choices = [].concat(args.choices || []);\n  const toSelected = items => items.filter(item => item.selected).map(item => item.value);\n  return toPrompt('MultiselectPrompt', args, {\n    onAbort: toSelected,\n    onSubmit: toSelected\n  });\n};\n\n$.autocompleteMultiselect = args => {\n  args.choices = [].concat(args.choices || []);\n  const toSelected = items => items.filter(item => item.selected).map(item => item.value);\n  return toPrompt('AutocompleteMultiselectPrompt', args, {\n    onAbort: toSelected,\n    onSubmit: toSelected\n  });\n};\n\nconst byTitle = (input, choices) => Promise.resolve(\n  choices.filter(item => item.title.slice(0, input.length).toLowerCase() === input.toLowerCase())\n);\n\n/**\n * Interactive auto-complete prompt\n * @param {string} args.message Prompt message to display\n * @param {Array} args.choices Array of auto-complete choices objects `[{ title, value }, ...]`\n * @param {Function} [args.suggest] Function to filter results based on user input. Defaults to sort by `title`\n * @param {number} [args.limit=10] Max number of results to show\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {String} [args.initial] Index of the default value\n * @param {String} [args.fallback] Fallback message - defaults to initial value\n * @param {function} [args.onState] On state change callback\n * @param {Stream} [args.stdin] The Readable stream to listen to\n * @param {Stream} [args.stdout] The Writable stream to write readline data to\n * @returns {Promise} Promise with user input\n */\n$.autocomplete = args => {\n  args.suggest = args.suggest || byTitle;\n  args.choices = [].concat(args.choices || []);\n  return toPrompt('AutocompletePrompt', args);\n};\n"]},"metadata":{},"sourceType":"script"}