{"ast":null,"code":"'use strict';\n\nconst strip = require('./strip');\n\nconst _require = require('sisteransi'),\n      erase = _require.erase,\n      cursor = _require.cursor;\n\nconst width = str => [...strip(str)].length;\n\nmodule.exports = function (prompt, perLine = process.stdout.columns) {\n  if (!perLine) return erase.line + cursor.to(0);\n  let rows = 0;\n  const lines = prompt.split(/\\r?\\n/);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      let line = _step.value;\n      rows += 1 + Math.floor(Math.max(width(line) - 1, 0) / perLine);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return (erase.line + cursor.prevLine()).repeat(rows - 1) + erase.line + cursor.to(0);\n};","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/node_modules/prompts/dist/util/clear.js"],"names":["strip","require","_require","erase","cursor","width","str","length","module","exports","prompt","perLine","process","stdout","columns","line","to","rows","lines","split","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","value","Math","floor","max","err","return","prevLine","repeat"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAxB;AAAA,MACME,KAAK,GAAGD,QAAQ,CAACC,KADvB;AAAA,MAEMC,MAAM,GAAGF,QAAQ,CAACE,MAFxB;;AAIA,MAAMC,KAAK,GAAGC,GAAG,IAAI,CAAC,GAAGN,KAAK,CAACM,GAAD,CAAT,EAAgBC,MAArC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,MAAV,EAAkBC,OAAO,GAAGC,OAAO,CAACC,MAAR,CAAeC,OAA3C,EAAoD;AACnE,MAAI,CAACH,OAAL,EAAc,OAAOR,KAAK,CAACY,IAAN,GAAaX,MAAM,CAACY,EAAP,CAAU,CAAV,CAApB;AACd,MAAIC,IAAI,GAAG,CAAX;AACA,QAAMC,KAAK,GAAGR,MAAM,CAACS,KAAP,CAAa,OAAb,CAAd;AACA,MAAIC,yBAAyB,GAAG,IAAhC;AACA,MAAIC,iBAAiB,GAAG,KAAxB;AACA,MAAIC,cAAc,GAAGC,SAArB;;AAEA,MAAI;AACF,SAAK,IAAIC,SAAS,GAAGN,KAAK,CAACO,MAAM,CAACC,QAAR,CAAL,EAAhB,EAA0CC,KAA/C,EAAsD,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAV,EAAT,EAA2BC,IAAzD,CAAtD,EAAsHT,yBAAyB,GAAG,IAAlJ,EAAwJ;AACtJ,UAAIL,IAAI,GAAGY,KAAK,CAACG,KAAjB;AACAb,MAAAA,IAAI,IAAI,IAAIc,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAAS5B,KAAK,CAACU,IAAD,CAAL,GAAc,CAAvB,EAA0B,CAA1B,IAA+BJ,OAA1C,CAAZ;AACD;AACF,GALD,CAKE,OAAOuB,GAAP,EAAY;AACZb,IAAAA,iBAAiB,GAAG,IAApB;AACAC,IAAAA,cAAc,GAAGY,GAAjB;AACD,GARD,SAQU;AACR,QAAI;AACF,UAAI,CAACd,yBAAD,IAA8BI,SAAS,CAACW,MAAV,IAAoB,IAAtD,EAA4D;AAC1DX,QAAAA,SAAS,CAACW,MAAV;AACD;AACF,KAJD,SAIU;AACR,UAAId,iBAAJ,EAAuB;AACrB,cAAMC,cAAN;AACD;AACF;AACF;;AAED,SAAO,CAACnB,KAAK,CAACY,IAAN,GAAaX,MAAM,CAACgC,QAAP,EAAd,EAAiCC,MAAjC,CAAwCpB,IAAI,GAAG,CAA/C,IAAoDd,KAAK,CAACY,IAA1D,GAAiEX,MAAM,CAACY,EAAP,CAAU,CAAV,CAAxE;AACD,CA7BD","sourcesContent":["'use strict';\n\nconst strip = require('./strip');\n\nconst _require = require('sisteransi'),\n      erase = _require.erase,\n      cursor = _require.cursor;\n\nconst width = str => [...strip(str)].length;\n\nmodule.exports = function (prompt, perLine = process.stdout.columns) {\n  if (!perLine) return erase.line + cursor.to(0);\n  let rows = 0;\n  const lines = prompt.split(/\\r?\\n/);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      let line = _step.value;\n      rows += 1 + Math.floor(Math.max(width(line) - 1, 0) / perLine);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return (erase.line + cursor.prevLine()).repeat(rows - 1) + erase.line + cursor.to(0);\n};"]},"metadata":{},"sourceType":"script"}