{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/components/Questions.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { questionsRequest } from '../actions';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionIndex: 0\n    };\n  }\n\n  async componentDidMount() {\n    const requestQuestions = this.props.requestQuestions;\n    const token = localStorage.getItem('token');\n    await requestQuestions(token);\n  }\n\n  render() {\n    const questionIndex = this.state.questionIndex;\n    const questions = this.props.questions;\n    const results = questions.results;\n\n    if (questions.results.length !== 5) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Loading\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questions: state.triviaReducer.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  requestQuestions: token => dispatch(questionsRequest(token))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/components/Questions.jsx"],"names":["React","Component","connect","questionsRequest","Questions","constructor","state","questionIndex","componentDidMount","requestQuestions","props","token","localStorage","getItem","render","questions","results","length","mapStateToProps","triviaReducer","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,YAAjC;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAChCI,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGD;;AAED,QAAMC,iBAAN,GAA0B;AAAA,UAChBC,gBADgB,GACK,KAAKC,KADV,CAChBD,gBADgB;AAExB,UAAME,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AAEA,UAAMJ,gBAAgB,CAACE,KAAD,CAAtB;AACD;;AAEDG,EAAAA,MAAM,GAAG;AAAA,UACCP,aADD,GACmB,KAAKD,KADxB,CACCC,aADD;AAAA,UAECQ,SAFD,GAEe,KAAKL,KAFpB,CAECK,SAFD;AAAA,UAGCC,OAHD,GAGaD,SAHb,CAGCC,OAHD;;AAIP,QAAID,SAAS,CAACC,OAAV,CAAkBC,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAR;AACD;;AAED,WAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF;AAeD;;AAtC+B;;AAyClC,MAAMC,eAAe,GAAIZ,KAAD,KAAY;AAClCS,EAAAA,SAAS,EAAET,KAAK,CAACa,aAAN,CAAoBJ;AADG,CAAZ,CAAxB;;AAIA,MAAMK,kBAAkB,GAAIC,QAAD,KAAe;AACxCZ,EAAAA,gBAAgB,EAAGE,KAAD,IAAWU,QAAQ,CAAClB,gBAAgB,CAACQ,KAAD,CAAjB;AADG,CAAf,CAA3B;;AAIA,eAAeT,OAAO,CAACgB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ChB,SAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { questionsRequest } from '../actions';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionIndex: 0,\n    };\n  }\n\n  async componentDidMount() {\n    const { requestQuestions } = this.props;\n    const token = localStorage.getItem('token');\n\n    await requestQuestions(token);\n  }\n\n  render() {\n    const { questionIndex } = this.state;\n    const { questions } = this.props;\n    const { results } = questions;\n    if (questions.results.length !== 5) {\n      return (<p>Loading</p>);\n    }\n\n    return (\n\n      <div>\n        {/* { results.filter((question, index) => {\n          if (questionIndex === index) {\n            return (\n              <div>\n                <p data-testid=\"question-text\">{ question.name }</p>\n                <p data-testid=\"question-category\">{question.category}</p>\n              </div>\n            );\n          }\n        })} */}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.triviaReducer.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuestions: (token) => dispatch(questionsRequest(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}