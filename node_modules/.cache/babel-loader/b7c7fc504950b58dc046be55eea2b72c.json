{"ast":null,"code":"'use strict';\n\nconst color = require('kleur');\n\nconst _require = require('sisteransi'),\n      cursor = _require.cursor;\n\nconst MultiselectPrompt = require('./multiselect');\n\nconst _require2 = require('../util'),\n      clear = _require2.clear,\n      style = _require2.style,\n      figures = _require2.figures;\n/**\n * MultiselectPrompt Base Element\n * @param {Object} opts Options\n * @param {String} opts.message Message\n * @param {Array} opts.choices Array of choice objects\n * @param {String} [opts.hint] Hint to display\n * @param {String} [opts.warn] Hint shown for disabled choices\n * @param {Number} [opts.max] Max choices\n * @param {Number} [opts.cursor=0] Cursor start position\n * @param {Stream} [opts.stdin] The Readable stream to listen to\n * @param {Stream} [opts.stdout] The Writable stream to write readline data to\n */\n\n\nclass AutocompleteMultiselectPrompt extends MultiselectPrompt {\n  constructor(opts = {}) {\n    opts.overrideRender = true;\n    super(opts);\n    this.inputValue = '';\n    this.clear = clear('');\n    this.filteredOptions = this.value;\n    this.render();\n  }\n\n  last() {\n    this.cursor = this.filteredOptions.length - 1;\n    this.render();\n  }\n\n  next() {\n    this.cursor = (this.cursor + 1) % this.filteredOptions.length;\n    this.render();\n  }\n\n  up() {\n    if (this.cursor === 0) {\n      this.cursor = this.filteredOptions.length - 1;\n    } else {\n      this.cursor--;\n    }\n\n    this.render();\n  }\n\n  down() {\n    if (this.cursor === this.filteredOptions.length - 1) {\n      this.cursor = 0;\n    } else {\n      this.cursor++;\n    }\n\n    this.render();\n  }\n\n  left() {\n    this.filteredOptions[this.cursor].selected = false;\n    this.render();\n  }\n\n  right() {\n    if (this.value.filter(e => e.selected).length >= this.maxChoices) return this.bell();\n    this.filteredOptions[this.cursor].selected = true;\n    this.render();\n  }\n\n  delete() {\n    if (this.inputValue.length) {\n      this.inputValue = this.inputValue.substr(0, this.inputValue.length - 1);\n      this.updateFilteredOptions();\n    }\n  }\n\n  updateFilteredOptions() {\n    const currentHighlight = this.filteredOptions[this.cursor];\n    this.filteredOptions = this.value.filter(v => {\n      if (this.inputValue) {\n        if (typeof v.title === 'string') {\n          if (v.title.toLowerCase().includes(this.inputValue.toLowerCase())) {\n            return true;\n          }\n        }\n\n        if (typeof v.value === 'string') {\n          if (v.value.toLowerCase().includes(this.inputValue.toLowerCase())) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      return true;\n    });\n    const newHighlightIndex = this.filteredOptions.findIndex(v => v === currentHighlight);\n    this.cursor = newHighlightIndex < 0 ? 0 : newHighlightIndex;\n    this.render();\n  }\n\n  handleSpaceToggle() {\n    const v = this.filteredOptions[this.cursor];\n\n    if (v.selected) {\n      v.selected = false;\n      this.render();\n    } else if (v.disabled || this.value.filter(e => e.selected).length >= this.maxChoices) {\n      return this.bell();\n    } else {\n      v.selected = true;\n      this.render();\n    }\n  }\n\n  handleInputChange(c) {\n    this.inputValue = this.inputValue + c;\n    this.updateFilteredOptions();\n  }\n\n  _(c, key) {\n    if (c === ' ') {\n      this.handleSpaceToggle();\n    } else {\n      this.handleInputChange(c);\n    }\n  }\n\n  renderInstructions() {\n    if (this.instructions === undefined || this.instructions) {\n      if (typeof this.instructions === 'string') {\n        return this.instructions;\n      }\n\n      return `\nInstructions:\n    ${figures.arrowUp}/${figures.arrowDown}: Highlight option\n    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection\n    [a,b,c]/delete: Filter choices\n    enter/return: Complete answer\n`;\n    }\n\n    return '';\n  }\n\n  renderCurrentInput() {\n    return `\nFiltered results for: ${this.inputValue ? this.inputValue : color.gray('Enter something to filter')}\\n`;\n  }\n\n  renderOption(cursor, v, i) {\n    let title;\n    if (v.disabled) title = cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);else title = cursor === i ? color.cyan().underline(v.title) : v.title;\n    return (v.selected ? color.green(figures.radioOn) : figures.radioOff) + '  ' + title;\n  }\n\n  renderDoneOrInstructions() {\n    if (this.done) {\n      return this.value.filter(e => e.selected).map(v => v.title).join(', ');\n    }\n\n    const output = [color.gray(this.hint), this.renderInstructions(), this.renderCurrentInput()];\n\n    if (this.filteredOptions.length && this.filteredOptions[this.cursor].disabled) {\n      output.push(color.yellow(this.warn));\n    }\n\n    return output.join(' ');\n  }\n\n  render() {\n    if (this.closed) return;\n    if (this.firstRender) this.out.write(cursor.hide);\n    super.render(); // print prompt\n\n    let prompt = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(false), this.renderDoneOrInstructions()].join(' ');\n\n    if (this.showMinError) {\n      prompt += color.red(`You must select a minimum of ${this.minSelected} choices.`);\n      this.showMinError = false;\n    }\n\n    prompt += this.renderOptions(this.filteredOptions);\n    this.out.write(this.clear + prompt);\n    this.clear = clear(prompt);\n  }\n\n}\n\nmodule.exports = AutocompleteMultiselectPrompt;","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/node_modules/prompts/lib/elements/autocompleteMultiselect.js"],"names":["color","require","cursor","MultiselectPrompt","clear","style","figures","AutocompleteMultiselectPrompt","constructor","opts","overrideRender","inputValue","filteredOptions","value","render","last","length","next","up","down","left","selected","right","filter","e","maxChoices","bell","delete","substr","updateFilteredOptions","currentHighlight","v","title","toLowerCase","includes","newHighlightIndex","findIndex","handleSpaceToggle","disabled","handleInputChange","c","_","key","renderInstructions","instructions","undefined","arrowUp","arrowDown","arrowLeft","arrowRight","renderCurrentInput","gray","renderOption","i","underline","strikethrough","cyan","green","radioOn","radioOff","renderDoneOrInstructions","done","map","join","output","hint","push","yellow","warn","closed","firstRender","out","write","hide","prompt","symbol","aborted","bold","msg","delimiter","showMinError","red","minSelected","renderOptions","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst color = require('kleur');\nconst { cursor } = require('sisteransi');\nconst MultiselectPrompt = require('./multiselect');\nconst { clear, style, figures } = require('../util');\n/**\n * MultiselectPrompt Base Element\n * @param {Object} opts Options\n * @param {String} opts.message Message\n * @param {Array} opts.choices Array of choice objects\n * @param {String} [opts.hint] Hint to display\n * @param {String} [opts.warn] Hint shown for disabled choices\n * @param {Number} [opts.max] Max choices\n * @param {Number} [opts.cursor=0] Cursor start position\n * @param {Stream} [opts.stdin] The Readable stream to listen to\n * @param {Stream} [opts.stdout] The Writable stream to write readline data to\n */\nclass AutocompleteMultiselectPrompt extends MultiselectPrompt {\n  constructor(opts={}) {\n    opts.overrideRender = true;\n    super(opts);\n    this.inputValue = '';\n    this.clear = clear('');\n    this.filteredOptions = this.value;\n    this.render();\n  }\n\n  last() {\n    this.cursor = this.filteredOptions.length - 1;\n    this.render();\n  }\n  next() {\n    this.cursor = (this.cursor + 1) % this.filteredOptions.length;\n    this.render();\n  }\n\n  up() {\n    if (this.cursor === 0) {\n      this.cursor = this.filteredOptions.length - 1;\n    } else {\n      this.cursor--;\n    }\n    this.render();\n  }\n\n  down() {\n    if (this.cursor === this.filteredOptions.length - 1) {\n      this.cursor = 0;\n    } else {\n      this.cursor++;\n    }\n    this.render();\n  }\n\n  left() {\n    this.filteredOptions[this.cursor].selected = false;\n    this.render();\n  }\n\n  right() {\n    if (this.value.filter(e => e.selected).length >= this.maxChoices) return this.bell();\n    this.filteredOptions[this.cursor].selected = true;\n    this.render();\n  }\n\n  delete() {\n    if (this.inputValue.length) {\n      this.inputValue = this.inputValue.substr(0, this.inputValue.length - 1);\n      this.updateFilteredOptions();\n    }\n  }\n\n  updateFilteredOptions() {\n    const currentHighlight = this.filteredOptions[this.cursor];\n    this.filteredOptions = this.value\n      .filter(v => {\n        if (this.inputValue) {\n          if (typeof v.title === 'string') {\n            if (v.title.toLowerCase().includes(this.inputValue.toLowerCase())) {\n              return true;\n            }\n          }\n          if (typeof v.value === 'string') {\n            if (v.value.toLowerCase().includes(this.inputValue.toLowerCase())) {\n              return true;\n            }\n          }\n          return false;\n        }\n        return true;\n      });\n    const newHighlightIndex = this.filteredOptions.findIndex(v => v === currentHighlight)\n    this.cursor = newHighlightIndex < 0 ? 0 : newHighlightIndex;\n    this.render();\n  }\n\n  handleSpaceToggle() {\n    const v = this.filteredOptions[this.cursor];\n\n    if (v.selected) {\n      v.selected = false;\n      this.render();\n    } else if (v.disabled || this.value.filter(e => e.selected).length >= this.maxChoices) {\n      return this.bell();\n    } else {\n      v.selected = true;\n      this.render();\n    }\n  }\n\n  handleInputChange(c) {\n    this.inputValue = this.inputValue + c;\n    this.updateFilteredOptions();\n  }\n\n  _(c, key) {\n    if (c === ' ') {\n      this.handleSpaceToggle();\n    } else {\n      this.handleInputChange(c);\n    }\n  }\n\n  renderInstructions() {\n    if (this.instructions === undefined || this.instructions) {\n      if (typeof this.instructions === 'string') {\n        return this.instructions;\n      }\n      return `\nInstructions:\n    ${figures.arrowUp}/${figures.arrowDown}: Highlight option\n    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection\n    [a,b,c]/delete: Filter choices\n    enter/return: Complete answer\n`;\n    }\n    return '';\n  }\n\n  renderCurrentInput() {\n    return `\nFiltered results for: ${this.inputValue ? this.inputValue : color.gray('Enter something to filter')}\\n`;\n  }\n\n  renderOption(cursor, v, i) {\n    let title;\n    if (v.disabled) title = cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);\n    else title = cursor === i ? color.cyan().underline(v.title) : v.title;\n    return (v.selected ? color.green(figures.radioOn) : figures.radioOff) + '  ' + title\n  }\n\n  renderDoneOrInstructions() {\n    if (this.done) {\n      return this.value\n        .filter(e => e.selected)\n        .map(v => v.title)\n        .join(', ');\n    }\n\n    const output = [color.gray(this.hint), this.renderInstructions(), this.renderCurrentInput()];\n\n    if (this.filteredOptions.length && this.filteredOptions[this.cursor].disabled) {\n      output.push(color.yellow(this.warn));\n    }\n    return output.join(' ');\n  }\n\n  render() {\n    if (this.closed) return;\n    if (this.firstRender) this.out.write(cursor.hide);\n    super.render();\n\n    // print prompt\n\n    let prompt = [\n      style.symbol(this.done, this.aborted),\n      color.bold(this.msg),\n      style.delimiter(false),\n      this.renderDoneOrInstructions()\n    ].join(' ');\n\n    if (this.showMinError) {\n      prompt += color.red(`You must select a minimum of ${this.minSelected} choices.`);\n      this.showMinError = false;\n    }\n    prompt += this.renderOptions(this.filteredOptions);\n\n    this.out.write(this.clear + prompt);\n    this.clear = clear(prompt);\n  }\n}\n\nmodule.exports = AutocompleteMultiselectPrompt;\n"]},"metadata":{},"sourceType":"script"}