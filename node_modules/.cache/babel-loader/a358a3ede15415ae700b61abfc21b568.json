{"ast":null,"code":"import _objectDestructuringEmpty from \"/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nvar _jsxFileName = \"/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/pages/Login.jsx\";\n// create react component\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport logo from '../trivia.png';\nimport { requestToken } from '../actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: ''\n    };\n    this.verifyRegexEmail = this.verifyRegexEmail.bind(this);\n  }\n\n  verifyRegexEmail() {\n    /** Para realizar o uso de verificação do email, tive que usar o regex pattern\n     * para verificação de email abaixo:\n     * Source: https://forum.blip.ai/t/resolvido-regex-para-validacao-de-email/1635 */\n    const _this$state = this.state,\n          email = _this$state.email,\n          name = _this$state.name;\n    const emailRegex = /^([\\w.-]+)@([\\w-]+)((\\.(\\w){2,3})+)$/;\n    return emailRegex.test(email) && name.length > 0;\n  }\n\n  handleChange({\n    target\n  }) {\n    const name = target.name,\n          value = target.value;\n    this.setState({\n      [name]: value\n    }, () => console.log(this.verifyRegexEmail()));\n  }\n\n  startGame() {\n    _objectDestructuringEmpty(this.props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      width: \"150\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"SUA VEZ\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"label\", {\n      htmlFor: \"inputEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Email\",\n      id: \"inputEmail\",\n      \"data-testid\": \"input-gravatar-email\",\n      name: \"email\",\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      htmlFor: \"inputName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Nome\",\n      id: \"inputName\",\n      \"data-testid\": \"input-player-name\",\n      name: \"name\",\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-play\",\n      disabled: !this.verifyRegexEmail(),\n      onClick: () => this.startGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Jogar\"));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  triviaAPI: () => dispatch(requestToken())\n});\n\nexport default connect(null, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/pages/Login.jsx"],"names":["React","Component","connect","logo","requestToken","Login","constructor","props","state","name","email","verifyRegexEmail","bind","emailRegex","test","length","handleChange","target","value","setState","console","log","startGame","render","e","mapDispatchToProps","dispatch","triviaAPI"],"mappings":"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","sourcesContent":["// create react component\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport logo from '../trivia.png';\nimport { requestToken } from '../actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n    };\n\n    this.verifyRegexEmail = this.verifyRegexEmail.bind(this);\n  }\n\n  verifyRegexEmail() {\n    /** Para realizar o uso de verificação do email, tive que usar o regex pattern\n     * para verificação de email abaixo:\n     * Source: https://forum.blip.ai/t/resolvido-regex-para-validacao-de-email/1635 */\n    const { email, name } = this.state;\n    const emailRegex = /^([\\w.-]+)@([\\w-]+)((\\.(\\w){2,3})+)$/;\n    return (emailRegex.test(email) && name.length > 0);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value },\n      () => console.log(this.verifyRegexEmail()));\n  }\n\n  startGame() {\n    const {} = this.props;\n\n  }\n\n  render() {\n    return (\n      <div>\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" width=\"150\" />\n        <p>\n          SUA VEZ\n        </p>\n        <h1>Login</h1>\n        <label htmlFor=\"inputEmail\">\n          <input\n            type=\"text\"\n            placeholder=\"Email\"\n            id=\"inputEmail\"\n            data-testid=\"input-gravatar-email\"\n            name=\"email\"\n            onChange={ (e) => this.handleChange(e) }\n          />\n        </label>\n\n        <label htmlFor=\"inputName\">\n          <input\n            type=\"text\"\n            placeholder=\"Nome\"\n            id=\"inputName\"\n            data-testid=\"input-player-name\"\n            name=\"name\"\n            onChange={ (e) => this.handleChange(e) }\n          />\n        </label>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play\"\n          disabled={ !this.verifyRegexEmail() }\n          onClick={ () => this.startGame() }\n        >\n          Jogar\n        </button>\n      </div>\n\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  triviaAPI: () => dispatch(requestToken()),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}