{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/Desktop/Projects/M\\xF3dulo_Frontend/sd-011-project-trivia-react-redux/src/components/Questions.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { questionsRequest, sectionUser } from '../actions';\nimport AlternativesContainer from './subComponents/AlternativesContainer';\nimport NextAndFeedback from './NextAndFeedback';\nimport decodeHtml from '../helpers/htmldecode';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionIndex: 0,\n      questions: [],\n      styleAlternative: false,\n      countDown: 30,\n      assertions: 0,\n      score: 0\n    };\n    this.handleState = this.handleState.bind(this);\n    this.answerClick = this.answerClick.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.updateTimer = this.updateTimer.bind(this);\n    this.difficult = this.difficult.bind(this);\n    this.throwToLocalStorage = this.throwToLocalStorage.bind(this);\n  }\n\n  async componentDidMount() {\n    const state = {\n      player: {\n        name: '',\n        assertions: 0,\n        score: 0,\n        gravatarEmail: ''\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n    const requestQuestions = this.props.requestQuestions;\n    const token = localStorage.getItem('token');\n    await requestQuestions(token);\n    const questions = this.props.questions;\n    this.handleState(questions);\n    this.updateTimer();\n  }\n\n  updateTimer() {\n    const ThirtySeconds = 30;\n    let i = ThirtySeconds;\n    const oneSecond = 1000;\n    this.interval = setInterval(() => {\n      if (i === 0) {\n        this.setState({\n          styleAlternative: true\n        });\n        clearInterval(this.interval);\n      }\n\n      this.setState({\n        countDown: i\n      });\n      i -= 1;\n    }, oneSecond);\n  }\n\n  handleState(questions) {\n    this.setState({\n      questions: questions.results\n    });\n  }\n\n  throwToLocalStorage() {\n    const _this$props = this.props,\n          email = _this$props.email,\n          username = _this$props.username,\n          section = _this$props.section;\n    const _this$state = this.state,\n          assertions = _this$state.assertions,\n          score = _this$state.score;\n    const state = {\n      player: {\n        name: username,\n        assertions,\n        score,\n        gravatarEmail: email\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n    section(state.player);\n  }\n\n  nextQuestion() {\n    const questionIndex = this.state.questionIndex;\n    this.setState({\n      questionIndex: questionIndex + 1,\n      styleAlternative: false\n    });\n    this.updateTimer();\n  }\n\n  difficult(difficultLevel) {\n    const three = '3';\n\n    switch (difficultLevel.difficulty) {\n      case 'easy':\n        return 1;\n\n      case 'medium':\n        return 2;\n\n      case 'hard':\n        return three;\n      // 3\n\n      default:\n        return null;\n    }\n  }\n\n  async answerClick({\n    target\n  }) {\n    const questions = this.props.questions;\n    const _this$state2 = this.state,\n          questionIndex = _this$state2.questionIndex,\n          assertions = _this$state2.assertions,\n          countDown = _this$state2.countDown,\n          score = _this$state2.score;\n    this.setState({\n      styleAlternative: true\n    });\n\n    if (questions.results[questionIndex].correct_answer === target.innerHTML) {\n      const def = 10;\n      const questionScore = def + countDown * this.difficult(questions.results[questionIndex]);\n      this.setState({\n        assertions: assertions + 1,\n        score: score + questionScore\n      });\n      this.setState({}, () => this.throwToLocalStorage());\n    } else {\n      this.throwToLocalStorage();\n    }\n\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          questions = _this$state3.questions,\n          questionIndex = _this$state3.questionIndex,\n          styleAlternative = _this$state3.styleAlternative,\n          countDown = _this$state3.countDown;\n    const history = this.props.history;\n    return questions.length === 0 ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, questions.map(({\n      category,\n      question,\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers\n    }, index) => {\n      if (questionIndex === index) {\n        return React.createElement(\"div\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, \"Tempo restante:\", `${countDown}`), React.createElement(\"p\", {\n          \"data-testid\": \"question-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, category), React.createElement(\"p\", {\n          \"data-testid\": \"question-category\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, decodeHtml(question)), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, React.createElement(AlternativesContainer, {\n          alternatives: [...incorrectAnswers, correctAnswer],\n          styleAlternative: styleAlternative,\n          countDown: countDown,\n          answerClick: this.answerClick,\n          index: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        })), styleAlternative ? React.createElement(NextAndFeedback, {\n          index: questionIndex,\n          length: questions.length - 1,\n          nextQuestion: this.nextQuestion,\n          history: history,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }) : null);\n      }\n\n      return null;\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questions: state.triviaReducer.questions,\n  email: state.loginReducer.email,\n  username: state.loginReducer.name\n});\n\nconst mapDispatchToProps = dispatch => ({\n  requestQuestions: token => dispatch(questionsRequest(token)),\n  section: section => dispatch(sectionUser(section))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\nQuestions.propTypes = {\n  questions: PropTypes.shape({\n    results: PropTypes.shape({\n      category: PropTypes.string\n    })\n  }).isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n  section: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n  username: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/MÃ³dulo_Frontend/sd-011-project-trivia-react-redux/src/components/Questions.jsx"],"names":["React","Component","connect","PropTypes","questionsRequest","sectionUser","AlternativesContainer","NextAndFeedback","decodeHtml","Questions","constructor","state","questionIndex","questions","styleAlternative","countDown","assertions","score","handleState","bind","answerClick","nextQuestion","updateTimer","difficult","throwToLocalStorage","componentDidMount","player","name","gravatarEmail","localStorage","setItem","JSON","stringify","requestQuestions","props","token","getItem","ThirtySeconds","i","oneSecond","interval","setInterval","setState","clearInterval","results","email","username","section","difficultLevel","three","difficulty","target","correct_answer","innerHTML","def","questionScore","render","history","length","map","category","question","correctAnswer","incorrect_answers","incorrectAnswers","index","mapStateToProps","triviaReducer","loginReducer","mapDispatchToProps","dispatch","propTypes","shape","string","isRequired","func","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { questionsRequest, sectionUser } from '../actions';\nimport AlternativesContainer from './subComponents/AlternativesContainer';\nimport NextAndFeedback from './NextAndFeedback';\nimport decodeHtml from '../helpers/htmldecode';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionIndex: 0,\n      questions: [],\n      styleAlternative: false,\n      countDown: 30,\n      assertions: 0,\n      score: 0,\n    };\n\n    this.handleState = this.handleState.bind(this);\n    this.answerClick = this.answerClick.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.updateTimer = this.updateTimer.bind(this);\n    this.difficult = this.difficult.bind(this);\n    this.throwToLocalStorage = this.throwToLocalStorage.bind(this);\n  }\n\n  async componentDidMount() {\n    const state = {\n      player: {\n        name: '',\n        assertions: 0,\n        score: 0,\n        gravatarEmail: '',\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n\n    const { requestQuestions } = this.props;\n    const token = localStorage.getItem('token');\n    await requestQuestions(token);\n    const { questions } = this.props;\n    this.handleState(questions);\n    this.updateTimer();\n  }\n\n  updateTimer() {\n    const ThirtySeconds = 30;\n    let i = ThirtySeconds;\n    const oneSecond = 1000;\n    this.interval = setInterval(() => {\n      if (i === 0) {\n        this.setState({\n          styleAlternative: true,\n        });\n        clearInterval(this.interval);\n      }\n\n      this.setState({\n        countDown: i,\n      });\n      i -= 1;\n    }, oneSecond);\n  }\n\n  handleState(questions) {\n    this.setState({\n      questions: questions.results,\n    });\n  }\n\n  throwToLocalStorage() {\n    const { email, username, section } = this.props;\n    const { assertions, score } = this.state;\n    const state = {\n      player: {\n        name: username,\n        assertions,\n        score,\n        gravatarEmail: email,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n    section(state.player);\n  }\n\n  nextQuestion() {\n    const { questionIndex } = this.state;\n    this.setState({\n      questionIndex: questionIndex + 1,\n      styleAlternative: false,\n    });\n    this.updateTimer();\n  }\n\n  difficult(difficultLevel) {\n    const three = '3';\n    switch (difficultLevel.difficulty) {\n    case 'easy':\n      return 1;\n    case 'medium':\n      return 2;\n    case 'hard':\n      return three; // 3\n    default:\n      return null;\n    }\n  }\n\n  async answerClick({ target }) {\n    const { questions } = this.props;\n    const { questionIndex, assertions, countDown, score } = this.state;\n    this.setState({\n      styleAlternative: true,\n    });\n\n    if (questions.results[questionIndex].correct_answer === target.innerHTML) {\n      const def = 10;\n      const questionScore = (def + (countDown * this\n        .difficult(questions.results[questionIndex])));\n      this.setState({\n        assertions: assertions + 1,\n        score: score + questionScore,\n      });\n\n      this.setState({}, () => this.throwToLocalStorage());\n    } else {\n      this.throwToLocalStorage();\n    }\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const { questions, questionIndex, styleAlternative, countDown } = this.state;\n    const { history } = this.props;\n\n    return questions.length === 0 ? (\n      <div>Loading</div>\n    ) : (\n      <div>\n        {questions.map(({ category, question,\n          correct_answer: correctAnswer,\n          incorrect_answers: incorrectAnswers }, index) => {\n          if (questionIndex === index) {\n            return (\n              <div key={ index }>\n                <p>\n                  Tempo restante:\n                  {`${countDown}`}\n                </p>\n                <p data-testid=\"question-text\">{category}</p>\n                <p data-testid=\"question-category\">{decodeHtml(question)}</p>\n                <div>\n                  <AlternativesContainer\n                    alternatives={ [...incorrectAnswers, correctAnswer] }\n                    styleAlternative={ styleAlternative }\n                    countDown={ countDown }\n                    answerClick={ this.answerClick }\n                    index={ index }\n                  />\n                </div>\n                { styleAlternative ? (\n                  <NextAndFeedback\n                    index={ questionIndex }\n                    length={ questions.length - 1 }\n                    nextQuestion={ this.nextQuestion }\n                    history={ history }\n                  />\n                ) : null }\n              </div>\n            );\n          }\n          return null;\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.triviaReducer.questions,\n  email: state.loginReducer.email,\n  username: state.loginReducer.name,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuestions: (token) => dispatch(questionsRequest(token)),\n  section: (section) => dispatch(sectionUser(section)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n\nQuestions.propTypes = {\n  questions: PropTypes.shape({\n    results: PropTypes.shape({\n      category: PropTypes.string,\n    }),\n  }).isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n  section: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n  username: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}