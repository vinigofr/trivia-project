{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/pages/Login.jsx\";\n// create react component\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport logo from '../trivia.png';\nimport { requestToken, initialLogin } from '../actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: ''\n    };\n    this.verifyRegexEmail = this.verifyRegexEmail.bind(this);\n  }\n\n  verifyRegexEmail() {\n    /** Para realizar o uso de verificação do email, tive que usar o regex pattern\n     * para verificação de email abaixo:\n     * Source: https://forum.blip.ai/t/resolvido-regex-para-validacao-de-email/1635 */\n    const _this$state = this.state,\n          email = _this$state.email,\n          name = _this$state.name;\n    const emailRegex = /^([\\w.-]+)@([\\w-]+)((\\.(\\w){2,3})+)$/;\n    return emailRegex.test(email) && name.length > 0;\n  }\n\n  handleChange({\n    target\n  }) {\n    const name = target.name,\n          value = target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  async startGame() {\n    const _this$props = this.props,\n          triviaAPI = _this$props.triviaAPI,\n          history = _this$props.history,\n          login = _this$props.login;\n    await triviaAPI();\n    const token = this.props.token;\n    localStorage.setItem('token', token);\n    history.push('/game');\n    login(this.state);\n  }\n\n  render() {\n    const history = this.props.history;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      width: \"150\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"SUA VEZ\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"label\", {\n      htmlFor: \"inputEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Email\",\n      id: \"inputEmail\",\n      \"data-testid\": \"input-gravatar-email\",\n      name: \"email\",\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      htmlFor: \"inputName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Nome\",\n      id: \"inputName\",\n      \"data-testid\": \"input-player-name\",\n      name: \"name\",\n      onChange: e => this.handleChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-play\",\n      disabled: !this.verifyRegexEmail(),\n      onClick: () => this.startGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Jogar\"), React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-settings\",\n      onClick: () => history.push('/settings'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"engine-emoji\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"\\u2699\\uFE0F\")));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  token: state.triviaReducer.sectionTriviaToken\n});\n\nconst mapDispatchToProps = dispatch => ({\n  triviaAPI: () => dispatch(requestToken()),\n  login: data => dispatch(initialLogin(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired,\n  triviaAPI: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/pages/Login.jsx"],"names":["PropTypes","React","Component","connect","logo","requestToken","initialLogin","Login","constructor","props","state","name","email","verifyRegexEmail","bind","emailRegex","test","length","handleChange","target","value","setState","startGame","triviaAPI","history","login","token","localStorage","setItem","push","render","e","mapStateToProps","triviaReducer","sectionTriviaToken","mapDispatchToProps","dispatch","data","propTypes","shape","func","isRequired","string"],"mappings":"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","sourcesContent":["// create react component\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport logo from '../trivia.png';\nimport { requestToken, initialLogin } from '../actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n    };\n    this.verifyRegexEmail = this.verifyRegexEmail.bind(this);\n  }\n\n  verifyRegexEmail() {\n    /** Para realizar o uso de verificação do email, tive que usar o regex pattern\n     * para verificação de email abaixo:\n     * Source: https://forum.blip.ai/t/resolvido-regex-para-validacao-de-email/1635 */\n    const { email, name } = this.state;\n    const emailRegex = /^([\\w.-]+)@([\\w-]+)((\\.(\\w){2,3})+)$/;\n    return (emailRegex.test(email) && name.length > 0);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  async startGame() {\n    const { triviaAPI, history, login } = this.props;\n    await triviaAPI();\n    const { token } = this.props;\n    localStorage.setItem('token', token);\n    history.push('/game');\n\n    login(this.state);\n  }\n\n  render() {\n    const { history } = this.props;\n    return (\n      <div>\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" width=\"150\" />\n        <p>\n          SUA VEZ\n        </p>\n        <h1>Login</h1>\n        <label htmlFor=\"inputEmail\">\n          <input\n            type=\"text\"\n            placeholder=\"Email\"\n            id=\"inputEmail\"\n            data-testid=\"input-gravatar-email\"\n            name=\"email\"\n            onChange={ (e) => this.handleChange(e) }\n          />\n        </label>\n        <label htmlFor=\"inputName\">\n          <input\n            type=\"text\"\n            placeholder=\"Nome\"\n            id=\"inputName\"\n            data-testid=\"input-player-name\"\n            name=\"name\"\n            onChange={ (e) => this.handleChange(e) }\n          />\n        </label>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play\"\n          disabled={ !this.verifyRegexEmail() }\n          onClick={ () => this.startGame() }\n        >\n          Jogar\n        </button>\n        {/* https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/master/docs/rules/accessible-emoji.md */}\n        <button\n          type=\"button\"\n          data-testid=\"btn-settings\"\n          onClick={ () => history.push('/settings') }\n        >\n          <span role=\"img\" aria-label=\"engine-emoji\">⚙️</span>\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.triviaReducer.sectionTriviaToken,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  triviaAPI: () => dispatch(requestToken()),\n  login: (data) => dispatch(initialLogin(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  triviaAPI: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}