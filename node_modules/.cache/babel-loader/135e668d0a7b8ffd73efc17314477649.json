{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/components/Questions.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { questionsRequest } from '../actions';\nimport AlternativesContainer from './subComponents/AlternativesContainer';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionIndex: 0,\n      questions: [],\n      styleAlternative: false,\n      countDown: 30,\n      assertions: 0,\n      score: 0,\n      intervalId: null\n    };\n    this.handleState = this.handleState.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n    this.answerClick = this.answerClick.bind(this);\n    this.difficult = this.difficult.bind(this);\n    this.throwToLocalStorage = this.throwToLocalStorage.bind(this);\n  }\n\n  async componentDidMount() {\n    const requestQuestions = this.props.requestQuestions;\n    const token = localStorage.getItem('token');\n    await requestQuestions(token);\n    const questions = this.props.questions;\n    this.handleState(questions);\n    const ThirtySeconds = 30;\n    let i = ThirtySeconds;\n    const oneSecond = 1000;\n    const interval = setInterval(() => {\n      if (i === 0) {\n        this.setState({\n          styleAlternative: true\n        });\n        clearInterval(interval);\n      }\n\n      this.setState({\n        countDown: i,\n        intervalId: interval\n      });\n      i -= 1;\n    }, oneSecond);\n  }\n\n  handleState(questions) {\n    this.setState({\n      questions: questions.results\n    });\n  }\n\n  throwToLocalStorage() {\n    const _this$props = this.props,\n          email = _this$props.email,\n          username = _this$props.username;\n    const _this$state = this.state,\n          assertions = _this$state.assertions,\n          score = _this$state.score;\n    const player = {\n      name: username,\n      assertions,\n      score,\n      gravatarEmail: email\n    };\n    localStorage.setItem('player', JSON.stringify(player));\n  }\n  /* Para fazer uma espécie de embaralhamento, foi utilizada uma função retirada\n  de um pequeno tópico em StackOverFlow\n  Source: https://stackoverflow.com/questions/49555273/how-to-shuffle-an-array-of-objects-in-javascript */\n\n\n  shuffle(array) {\n    for (let i = array.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    return array;\n  }\n\n  difficult(difficultLevel) {\n    const three = '3';\n\n    switch (difficultLevel.difficulty) {\n      case 'easy':\n        return 1;\n\n      case 'medium':\n        return 2;\n\n      case 'hard':\n        return three;\n      // 3\n\n      default:\n        return null;\n    }\n  }\n\n  async answerClick({\n    target\n  }) {\n    const _this$props2 = this.props,\n          questions = _this$props2.questions,\n          email = _this$props2.email,\n          username = _this$props2.username;\n    const _this$state2 = this.state,\n          questionIndex = _this$state2.questionIndex,\n          assertions = _this$state2.assertions,\n          countDown = _this$state2.countDown,\n          score = _this$state2.score,\n          intervalId = _this$state2.intervalId;\n    this.setState({\n      styleAlternative: true\n    });\n\n    if (questions.results[questionIndex].correct_answer === target.innerHTML) {\n      const def = 10;\n      const questionScore = def + countDown * this.difficult(questions.results[questionIndex]);\n      console.log(questionScore);\n      this.setState({\n        assertions: assertions + 1,\n        score: score + questionScore\n      }, () => clearInterval(intervalId));\n      const player = {\n        name: username,\n        assertions,\n        score,\n        gravatarEmail: email\n      };\n      console.log(player);\n    }\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          questions = _this$state3.questions,\n          questionIndex = _this$state3.questionIndex,\n          styleAlternative = _this$state3.styleAlternative,\n          countDown = _this$state3.countDown;\n    return questions.length === 0 ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, questions.map(({\n      category,\n      question,\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers\n    }, index) => {\n      if (questionIndex === index) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, \"Tempo restante:\", React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, `${countDown}`)), React.createElement(\"p\", {\n          \"data-testid\": \"question-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, category), React.createElement(\"p\", {\n          \"data-testid\": \"question-category\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, question), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, React.createElement(AlternativesContainer, {\n          alternatives: [...incorrectAnswers, correctAnswer],\n          styleAlternative: styleAlternative,\n          countDown: countDown,\n          answerClick: this.answerClick,\n          index: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        })));\n      }\n\n      return null;\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questions: state.triviaReducer.questions,\n  email: state.loginReducer.email,\n  username: state.loginReducer.name\n});\n\nconst mapDispatchToProps = dispatch => ({\n  requestQuestions: token => dispatch(questionsRequest(token))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\nQuestions.propTypes = {\n  questions: PropTypes.shape({\n    results: PropTypes.shape({\n      category: PropTypes.string\n    })\n  }).isRequired,\n  requestQuestions: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/components/Questions.jsx"],"names":["React","Component","connect","PropTypes","questionsRequest","AlternativesContainer","Questions","constructor","state","questionIndex","questions","styleAlternative","countDown","assertions","score","intervalId","handleState","bind","shuffle","answerClick","difficult","throwToLocalStorage","componentDidMount","requestQuestions","props","token","localStorage","getItem","ThirtySeconds","i","oneSecond","interval","setInterval","setState","clearInterval","results","email","username","player","name","gravatarEmail","setItem","JSON","stringify","array","length","j","Math","floor","random","temp","difficultLevel","three","difficulty","target","correct_answer","innerHTML","def","questionScore","console","log","render","map","category","question","correctAnswer","incorrect_answers","incorrectAnswers","index","mapStateToProps","triviaReducer","loginReducer","mapDispatchToProps","dispatch","propTypes","shape","string","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { questionsRequest } from '../actions';\nimport AlternativesContainer from './subComponents/AlternativesContainer';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionIndex: 0,\n      questions: [],\n      styleAlternative: false,\n      countDown: 30,\n      assertions: 0,\n      score: 0,\n      intervalId: null,\n    };\n\n    this.handleState = this.handleState.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n    this.answerClick = this.answerClick.bind(this);\n    this.difficult = this.difficult.bind(this);\n    this.throwToLocalStorage = this.throwToLocalStorage.bind(this);\n  }\n\n  async componentDidMount() {\n    const { requestQuestions } = this.props;\n    const token = localStorage.getItem('token');\n\n    await requestQuestions(token);\n\n    const { questions } = this.props;\n    this.handleState(questions);\n\n    const ThirtySeconds = 30;\n    let i = ThirtySeconds;\n    const oneSecond = 1000;\n    const interval = setInterval(() => {\n      if (i === 0) {\n        this.setState({\n          styleAlternative: true,\n        });\n        clearInterval(interval);\n      }\n\n      this.setState({\n        countDown: i,\n        intervalId: interval,\n      });\n      i -= 1;\n    }, oneSecond);\n  }\n\n  handleState(questions) {\n    this.setState({\n      questions: questions.results,\n    });\n  }\n\n  throwToLocalStorage() {\n    const { /* questions, */ email, username } = this.props;\n    const { assertions, score } = this.state;\n    const player = {\n      name: username,\n      assertions,\n      score,\n      gravatarEmail: email,\n    };\n    localStorage.setItem('player', JSON.stringify(player));\n  }\n\n  /* Para fazer uma espécie de embaralhamento, foi utilizada uma função retirada\n  de um pequeno tópico em StackOverFlow\n  Source: https://stackoverflow.com/questions/49555273/how-to-shuffle-an-array-of-objects-in-javascript */\n  shuffle(array) {\n    for (let i = array.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  difficult(difficultLevel) {\n    const three = '3';\n    switch (difficultLevel.difficulty) {\n    case 'easy':\n      return 1;\n    case 'medium':\n      return 2;\n    case 'hard':\n      return three; // 3\n    default:\n      return null;\n    }\n  }\n\n  async answerClick({ target }) {\n    const { questions, email, username } = this.props;\n    const { questionIndex, assertions, countDown, score, intervalId } = this.state;\n    this.setState({\n      styleAlternative: true,\n    });\n\n    if (questions.results[questionIndex].correct_answer === target.innerHTML) {\n      const def = 10;\n      const questionScore = (def + (countDown * this\n        .difficult(questions.results[questionIndex])));\n      console.log(questionScore);\n      this.setState({\n        assertions: assertions + 1,\n        score: score + questionScore,\n      }, () => clearInterval(intervalId));\n\n      const player = {\n        name: username,\n        assertions,\n        score,\n        gravatarEmail: email,\n      };\n      console.log(player);\n    }\n  }\n\n  render() {\n    const { questions, questionIndex, styleAlternative, countDown } = this.state;\n    return questions.length === 0 ? <div>Loading</div> : (\n      <div>\n        {questions.map(({ category, question,\n          correct_answer: correctAnswer,\n          incorrect_answers: incorrectAnswers }, index) => {\n          if (questionIndex === index) {\n            return (\n              <div>\n                <p>\n                  Tempo restante:\n                  <span>\n                    {`${countDown}`}\n                  </span>\n                </p>\n                <p data-testid=\"question-text\">{category}</p>\n                <p data-testid=\"question-category\">{question}</p>\n                <div>\n                  <AlternativesContainer\n                    alternatives={ [...incorrectAnswers, correctAnswer] }\n                    styleAlternative={ styleAlternative }\n                    countDown={ countDown }\n                    answerClick={ this.answerClick }\n                    index={ index }\n                  />\n                </div>\n              </div>\n            );\n          } return null;\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.triviaReducer.questions,\n  email: state.loginReducer.email,\n  username: state.loginReducer.name,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuestions: (token) => dispatch(questionsRequest(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n\nQuestions.propTypes = {\n  questions: PropTypes.shape({\n    results: PropTypes.shape({\n      category: PropTypes.string,\n    }),\n  }).isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}