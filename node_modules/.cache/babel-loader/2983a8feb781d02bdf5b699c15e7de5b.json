{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/components/Questions.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { questionsRequest } from '../actions';\nimport CorrectAnswer from './CorrectAnswer';\nimport WrongAnswer from './WrongAnswer';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionIndex: 0,\n      questions: []\n    };\n    this.handleState = this.handleState.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n    this.answerClick = this.answerClick.bind(this);\n  }\n\n  async componentDidMount() {\n    const requestQuestions = this.props.requestQuestions;\n    const token = localStorage.getItem('token');\n    await requestQuestions(token);\n    const questions = this.props.questions;\n    this.handleState(questions);\n  }\n\n  handleState(questions) {\n    this.setState({\n      questions: questions.results\n    });\n  }\n  /* Para fazer uma espécie de embaralhamento, foi utilizada uma função retirada\n  de um pequeno tópico em StackOverFlow\n  Source: https://stackoverflow.com/questions/49555273/how-to-shuffle-an-array-of-objects-in-javascript */\n\n\n  shuffle(array) {\n    for (let i = array.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    return array;\n  }\n\n  answerClick() {\n    // this.setState({\n    //   questionIndex: this.state.questionIndex + 1,\n    // });\n    console.log('entrou no AnswerClick');\n  }\n\n  render() {\n    const _this$state = this.state,\n          questions = _this$state.questions,\n          questionIndex = _this$state.questionIndex;\n    return questions.length === 0 ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, questions.map(({\n      category,\n      question,\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers\n    }, index) => {\n      if (questionIndex === index) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          \"data-testid\": \"question-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, category), React.createElement(\"p\", {\n          \"data-testid\": \"question-category\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, question), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, this.shuffle([...incorrectAnswers, correctAnswer].map((text, alternativeIndex) => {\n          if (text === correctAnswer) {\n            return React.createElement(CorrectAnswer, {\n              key: text,\n              text: text,\n              answerClick: answerClick(),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 75\n              },\n              __self: this\n            });\n          }\n\n          return React.createElement(WrongAnswer, {\n            key: text,\n            text: text,\n            alternativeIndex: alternativeIndex,\n            answerClick: answerClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78\n            },\n            __self: this\n          });\n        }))));\n      }\n\n      return null;\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questions: state.triviaReducer.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  requestQuestions: token => dispatch(questionsRequest(token))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\nQuestions.propTypes = {\n  questions: PropTypes.shape({\n    results: PropTypes.shape({\n      category: PropTypes.string\n    })\n  }).isRequired,\n  requestQuestions: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/components/Questions.jsx"],"names":["React","Component","connect","PropTypes","questionsRequest","CorrectAnswer","WrongAnswer","Questions","constructor","state","questionIndex","questions","handleState","bind","shuffle","answerClick","componentDidMount","requestQuestions","props","token","localStorage","getItem","setState","results","array","i","length","j","Math","floor","random","temp","console","log","render","map","category","question","correct_answer","correctAnswer","incorrect_answers","incorrectAnswers","index","text","alternativeIndex","mapStateToProps","triviaReducer","mapDispatchToProps","dispatch","propTypes","shape","string","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { questionsRequest } from '../actions';\nimport CorrectAnswer from './CorrectAnswer';\nimport WrongAnswer from './WrongAnswer';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionIndex: 0,\n      questions: [],\n    };\n    this.handleState = this.handleState.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n    this.answerClick = this.answerClick.bind(this);\n  }\n\n  async componentDidMount() {\n    const { requestQuestions } = this.props;\n    const token = localStorage.getItem('token');\n\n    await requestQuestions(token);\n\n    const { questions } = this.props;\n    this.handleState(questions);\n  }\n\n  handleState(questions) {\n    this.setState({\n      questions: questions.results,\n    });\n  }\n\n  /* Para fazer uma espécie de embaralhamento, foi utilizada uma função retirada\n  de um pequeno tópico em StackOverFlow\n  Source: https://stackoverflow.com/questions/49555273/how-to-shuffle-an-array-of-objects-in-javascript */\n  shuffle(array) {\n    for (let i = array.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  answerClick() {\n    // this.setState({\n    //   questionIndex: this.state.questionIndex + 1,\n    // });\n    console.log('entrou no AnswerClick');\n  }\n\n  render() {\n    const { questions, questionIndex } = this.state;\n    return questions.length === 0 ? <div>Loading</div> : (\n      <div>\n        {questions.map(({ category,\n          question,\n          correct_answer: correctAnswer,\n          incorrect_answers: incorrectAnswers }, index) => {\n          if (questionIndex === index) {\n            return (\n              <div>\n                <p data-testid=\"question-text\">{category}</p>\n                <p data-testid=\"question-category\">{question}</p>\n                <div>\n                  {\n                    this.shuffle([...incorrectAnswers, correctAnswer]\n                      .map((text, alternativeIndex) => {\n                        if (text === correctAnswer) {\n                          return (\n                            <CorrectAnswer key={ text } text={ text } answerClick={ answerClick() } />);\n                        }\n                        return (\n                          <WrongAnswer\n                            key={ text }\n                            text={ text }\n                            alternativeIndex={ alternativeIndex }\n                            answerClick={ answerClick }\n                          />);\n                      }))\n                  }\n                </div>\n              </div>\n            );\n          }\n          return null;\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.triviaReducer.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuestions: (token) => dispatch(questionsRequest(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n\nQuestions.propTypes = {\n  questions: PropTypes.shape({\n    results: PropTypes.shape({\n      category: PropTypes.string,\n    }),\n  }).isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n\n};\n"]},"metadata":{},"sourceType":"module"}