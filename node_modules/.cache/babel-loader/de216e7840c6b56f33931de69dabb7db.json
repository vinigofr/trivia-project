{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/components/Questions.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { questionsRequest } from '../actions';\n\nclass Questions extends Component {\n  // constructor() {\n  //   super();\n  //   return a;\n  // }\n  async componentDidMount() {\n    const requestQuestions = this.props.requestQuestions;\n    const token = localStorage.getItem('token');\n    await requestQuestions(token);\n  }\n\n  render() {\n    const questions = this.props.questions;\n    console.log(questions.results);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Categoria da pergunta\"), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Texto da pergunta\"), questions.results && questions.results.map(({\n      category\n    }) => React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, category)));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questions: state.triviaReducer.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  requestQuestions: token => dispatch(questionsRequest(token))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/components/Questions.jsx"],"names":["React","Component","connect","questionsRequest","Questions","componentDidMount","requestQuestions","props","token","localStorage","getItem","render","questions","console","log","results","map","category","mapStateToProps","state","triviaReducer","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,YAAjC;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAChC;AACA;AACA;AACA;AAEA,QAAMI,iBAAN,GAA0B;AAAA,UAChBC,gBADgB,GACK,KAAKC,KADV,CAChBD,gBADgB;AAExB,UAAME,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,UAAMJ,gBAAgB,CAACE,KAAD,CAAtB;AACD;;AAEDG,EAAAA,MAAM,GAAG;AAAA,UACCC,SADD,GACe,KAAKL,KADpB,CACCK,SADD;AAEPC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAS,CAACG,OAAtB;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,qBAAY,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAEE;AAAG,qBAAY,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,EAGKH,SAAS,CAACG,OAAV,IAAqBH,SAAS,CAACG,OAAV,CAAkBC,GAAlB,CAAsB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,QAAL,CAAzC,CAH1B,CADF;AAOD;;AAvB+B;;AA0BlC,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCP,EAAAA,SAAS,EAAEO,KAAK,CAACC,aAAN,CAAoBR;AADG,CAAZ,CAAxB;;AAIA,MAAMS,kBAAkB,GAAIC,QAAD,KAAe;AACxChB,EAAAA,gBAAgB,EAAGE,KAAD,IAAWc,QAAQ,CAACnB,gBAAgB,CAACK,KAAD,CAAjB;AADG,CAAf,CAA3B;;AAIA,eAAeN,OAAO,CAACgB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CjB,SAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { questionsRequest } from '../actions';\n\nclass Questions extends Component {\n  // constructor() {\n  //   super();\n  //   return a;\n  // }\n\n  async componentDidMount() {\n    const { requestQuestions } = this.props;\n    const token = localStorage.getItem('token');\n    await requestQuestions(token);\n  }\n\n  render() {\n    const { questions } = this.props;\n    console.log(questions.results);\n\n    return (\n      <div>\n        <p data-testid=\"question-category\">Categoria da pergunta</p>\n        <p data-testid=\"question-text\">Texto da pergunta</p>\n        {  questions.results && questions.results.map(({ category }) => (<p>{ category }</p>))}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.triviaReducer.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestQuestions: (token) => dispatch(questionsRequest(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}