{"ast":null,"code":"var _jsxFileName = \"/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/pages/Feedback.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n    this.sendPlayerInfoToRanking = this.sendPlayerInfoToRanking.bind(this);\n  }\n\n  componentDidMount() {\n    this.sendPlayerInfoToRanking();\n  }\n\n  scoreMessage(assertions) {\n    const minimumAssertion = 3;\n\n    if (assertions < minimumAssertion) {\n      return 'Podia ser melhor...';\n    }\n\n    return 'Mandou bem!';\n  }\n\n  sendPlayerInfoToRanking() {\n    const _localStorage = localStorage,\n          ranking = _localStorage.ranking;\n    const player = this.props.sectionPlayer;\n    console.log(player); // const gravatarHash = md5(this.props.sectionPlayer.player.gravatarEmail).toString();\n    // const avatar = `https://www.gravatar.com/avatar/${gravatarHash}`;\n\n    if (ranking) {\n      localStorage.getItem('ranking', []);\n      const oldRanking = JSON.parse(ranking);\n      const newRanking = oldRanking.concat({\n        name: this.props.name,\n        score: this.props.score,\n        picture: avatar\n      });\n      return localStorage.setItem('ranking', JSON.stringify(newRanking));\n    }\n\n    const emptyRanking = {\n      name: this.props.name,\n      score: this.props.score,\n      picture: avatar\n    };\n    return localStorage.setItem('ranking', [emptyRanking]);\n  }\n\n  render() {\n    const _this$props = this.props,\n          history = _this$props.history,\n          player = _this$props.sectionPlayer;\n    const name = player.name,\n          score = player.score,\n          gravatarEmail = player.gravatarEmail,\n          assertions = player.assertions;\n    const gravatarHash = md5(gravatarEmail).toString();\n    return React.createElement(\"div\", {\n      \"data-testid\": \"feedback-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.scoreMessage(assertions)), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, 'Jogador: ', React.createElement(\"span\", {\n      \"data-testid\": \"header-player-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, name), ' acertou ', React.createElement(\"span\", {\n      \"data-testid\": \"feedback-total-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, assertions), ' questÃµes.'), React.createElement(\"img\", {\n      alt: \"avatar\",\n      src: `https://www.gravatar.com/avatar/${gravatarHash}`,\n      \"data-testid\": \"header-profile-picture\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Pontua\\xE7\\xE3o:\", React.createElement(\"span\", {\n      \"data-testid\": \"header-score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, score), React.createElement(\"span\", {\n      \"data-testid\": \"feedback-total-score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, score)), React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-play-again\",\n      onClick: () => history.push('/'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Jogar novamente\"), React.createElement(\"button\", {\n      \"data-testid\": \"btn-ranking\",\n      type: \"button\",\n      onClick: () => history.push('/ranking'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Ver Ranking\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  sectionPlayer: state.sectionReducer.player\n});\n\nexport default connect(mapStateToProps)(Feedback);\nFeedback.propTypes = {\n  sectionPlayer: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    gravatarEmail: PropTypes.string.isRequired\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};","map":{"version":3,"sources":["/home/vinicius/Desktop/Projects/sd-011-project-trivia-react-redux/src/pages/Feedback.jsx"],"names":["React","Component","connect","md5","PropTypes","Feedback","constructor","props","sendPlayerInfoToRanking","bind","componentDidMount","scoreMessage","assertions","minimumAssertion","localStorage","ranking","player","sectionPlayer","console","log","getItem","oldRanking","JSON","parse","newRanking","concat","name","score","picture","avatar","setItem","stringify","emptyRanking","render","history","gravatarEmail","gravatarHash","toString","push","mapStateToProps","state","sectionReducer","propTypes","shape","string","isRequired","number","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n    this.sendPlayerInfoToRanking = this.sendPlayerInfoToRanking.bind(this);\n  }\n\n  componentDidMount() {\n    this.sendPlayerInfoToRanking();\n  }\n\n  scoreMessage(assertions) {\n    const minimumAssertion = 3;\n    if (assertions < minimumAssertion) {\n      return 'Podia ser melhor...';\n    }\n    return 'Mandou bem!';\n  }\n\n  sendPlayerInfoToRanking() {\n    const { ranking } = localStorage;\n    const { sectionPlayer: player } = this.props;\n    console.log(player);\n\n    // const gravatarHash = md5(this.props.sectionPlayer.player.gravatarEmail).toString();\n    // const avatar = `https://www.gravatar.com/avatar/${gravatarHash}`;\n    if (ranking) {\n      localStorage.getItem('ranking', []);\n      const oldRanking = JSON.parse(ranking);\n      const newRanking = oldRanking.concat({\n        name: this.props.name,\n        score: this.props.score,\n        picture: avatar,\n      });\n      return localStorage.setItem('ranking', JSON.stringify(newRanking));\n    }\n    const emptyRanking = {\n      name: this.props.name,\n      score: this.props.score,\n      picture: avatar,\n    };\n\n    return localStorage.setItem('ranking', [emptyRanking]);\n  }\n\n  render() {\n    const { history, sectionPlayer: player } = this.props;\n    const { name, score, gravatarEmail, assertions } = player;\n    const gravatarHash = md5(gravatarEmail).toString();\n\n    return (\n      <div data-testid=\"feedback-text\">\n        <h1>{this.scoreMessage(assertions)}</h1>\n        <h1>\n          {'Jogador: '}\n          <span data-testid=\"header-player-name\">{ name }</span>\n          {' acertou '}\n          <span data-testid=\"feedback-total-question\">{ assertions }</span>\n          {' questÃµes.'}\n        </h1>\n        <img\n          alt=\"avatar\"\n          src={ `https://www.gravatar.com/avatar/${gravatarHash}` }\n          data-testid=\"header-profile-picture\"\n        />\n        <p>\n          {/* Lembrar de criar o componente header\n          para mostrar placar e o resto. Req 14, tÃ¡ no figma */}\n          PontuaÃ§Ã£o:\n          <span data-testid=\"header-score\">{score}</span>\n          <span data-testid=\"feedback-total-score\">{score}</span>\n        </p>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play-again\"\n          onClick={ () => history.push('/') }\n        >\n          Jogar novamente\n        </button>\n        <button\n          data-testid=\"btn-ranking\"\n          type=\"button\"\n          onClick={ () => history.push('/ranking') }\n        >\n          Ver Ranking\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  sectionPlayer: state.sectionReducer.player,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n\nFeedback.propTypes = {\n  sectionPlayer: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    gravatarEmail: PropTypes.string.isRequired,\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}